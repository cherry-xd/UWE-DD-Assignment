
Digital Design OLED Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039f0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de4  08003ab0  08003ab0  00013ab0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004894  08004894  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004894  08004894  00014894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800489c  0800489c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800489c  0800489c  0001489c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048a0  080048a0  000148a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080048a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000504  20000014  080048b8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000518  080048b8  00020518  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010741  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002201  00000000  00000000  0003077d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  00032980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac8  00000000  00000000  00033528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174ff  00000000  00000000  00033ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6e6  00000000  00000000  0004b4ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093016  00000000  00000000  0005abd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000edbeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000290c  00000000  00000000  000edc40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a98 	.word	0x08003a98

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08003a98 	.word	0x08003a98

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	1c08      	adds	r0, r1, #0
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	469b      	mov	fp, r3
 800046a:	d433      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046c:	465a      	mov	r2, fp
 800046e:	4653      	mov	r3, sl
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83a      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e078      	b.n	8000578 <__udivmoddi4+0x144>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e075      	b.n	800057e <__udivmoddi4+0x14a>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e028      	b.n	80004fe <__udivmoddi4+0xca>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	2320      	movs	r3, #32
 80004d8:	1a9b      	subs	r3, r3, r2
 80004da:	4652      	mov	r2, sl
 80004dc:	40da      	lsrs	r2, r3
 80004de:	4641      	mov	r1, r8
 80004e0:	0013      	movs	r3, r2
 80004e2:	464a      	mov	r2, r9
 80004e4:	408a      	lsls	r2, r1
 80004e6:	0017      	movs	r7, r2
 80004e8:	4642      	mov	r2, r8
 80004ea:	431f      	orrs	r7, r3
 80004ec:	4653      	mov	r3, sl
 80004ee:	4093      	lsls	r3, r2
 80004f0:	001e      	movs	r6, r3
 80004f2:	42af      	cmp	r7, r5
 80004f4:	d9c4      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f6:	2200      	movs	r2, #0
 80004f8:	2300      	movs	r3, #0
 80004fa:	9200      	str	r2, [sp, #0]
 80004fc:	9301      	str	r3, [sp, #4]
 80004fe:	4643      	mov	r3, r8
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0d9      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000504:	07fb      	lsls	r3, r7, #31
 8000506:	0872      	lsrs	r2, r6, #1
 8000508:	431a      	orrs	r2, r3
 800050a:	4646      	mov	r6, r8
 800050c:	087b      	lsrs	r3, r7, #1
 800050e:	e00e      	b.n	800052e <__udivmoddi4+0xfa>
 8000510:	42ab      	cmp	r3, r5
 8000512:	d101      	bne.n	8000518 <__udivmoddi4+0xe4>
 8000514:	42a2      	cmp	r2, r4
 8000516:	d80c      	bhi.n	8000532 <__udivmoddi4+0xfe>
 8000518:	1aa4      	subs	r4, r4, r2
 800051a:	419d      	sbcs	r5, r3
 800051c:	2001      	movs	r0, #1
 800051e:	1924      	adds	r4, r4, r4
 8000520:	416d      	adcs	r5, r5
 8000522:	2100      	movs	r1, #0
 8000524:	3e01      	subs	r6, #1
 8000526:	1824      	adds	r4, r4, r0
 8000528:	414d      	adcs	r5, r1
 800052a:	2e00      	cmp	r6, #0
 800052c:	d006      	beq.n	800053c <__udivmoddi4+0x108>
 800052e:	42ab      	cmp	r3, r5
 8000530:	d9ee      	bls.n	8000510 <__udivmoddi4+0xdc>
 8000532:	3e01      	subs	r6, #1
 8000534:	1924      	adds	r4, r4, r4
 8000536:	416d      	adcs	r5, r5
 8000538:	2e00      	cmp	r6, #0
 800053a:	d1f8      	bne.n	800052e <__udivmoddi4+0xfa>
 800053c:	9800      	ldr	r0, [sp, #0]
 800053e:	9901      	ldr	r1, [sp, #4]
 8000540:	465b      	mov	r3, fp
 8000542:	1900      	adds	r0, r0, r4
 8000544:	4169      	adcs	r1, r5
 8000546:	2b00      	cmp	r3, #0
 8000548:	db24      	blt.n	8000594 <__udivmoddi4+0x160>
 800054a:	002b      	movs	r3, r5
 800054c:	465a      	mov	r2, fp
 800054e:	4644      	mov	r4, r8
 8000550:	40d3      	lsrs	r3, r2
 8000552:	002a      	movs	r2, r5
 8000554:	40e2      	lsrs	r2, r4
 8000556:	001c      	movs	r4, r3
 8000558:	465b      	mov	r3, fp
 800055a:	0015      	movs	r5, r2
 800055c:	2b00      	cmp	r3, #0
 800055e:	db2a      	blt.n	80005b6 <__udivmoddi4+0x182>
 8000560:	0026      	movs	r6, r4
 8000562:	409e      	lsls	r6, r3
 8000564:	0033      	movs	r3, r6
 8000566:	0026      	movs	r6, r4
 8000568:	4647      	mov	r7, r8
 800056a:	40be      	lsls	r6, r7
 800056c:	0032      	movs	r2, r6
 800056e:	1a80      	subs	r0, r0, r2
 8000570:	4199      	sbcs	r1, r3
 8000572:	9000      	str	r0, [sp, #0]
 8000574:	9101      	str	r1, [sp, #4]
 8000576:	e79f      	b.n	80004b8 <__udivmoddi4+0x84>
 8000578:	42a3      	cmp	r3, r4
 800057a:	d8bc      	bhi.n	80004f6 <__udivmoddi4+0xc2>
 800057c:	e783      	b.n	8000486 <__udivmoddi4+0x52>
 800057e:	4642      	mov	r2, r8
 8000580:	2320      	movs	r3, #32
 8000582:	2100      	movs	r1, #0
 8000584:	1a9b      	subs	r3, r3, r2
 8000586:	2200      	movs	r2, #0
 8000588:	9100      	str	r1, [sp, #0]
 800058a:	9201      	str	r2, [sp, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	40da      	lsrs	r2, r3
 8000590:	9201      	str	r2, [sp, #4]
 8000592:	e786      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000594:	4642      	mov	r2, r8
 8000596:	2320      	movs	r3, #32
 8000598:	1a9b      	subs	r3, r3, r2
 800059a:	002a      	movs	r2, r5
 800059c:	4646      	mov	r6, r8
 800059e:	409a      	lsls	r2, r3
 80005a0:	0023      	movs	r3, r4
 80005a2:	40f3      	lsrs	r3, r6
 80005a4:	4644      	mov	r4, r8
 80005a6:	4313      	orrs	r3, r2
 80005a8:	002a      	movs	r2, r5
 80005aa:	40e2      	lsrs	r2, r4
 80005ac:	001c      	movs	r4, r3
 80005ae:	465b      	mov	r3, fp
 80005b0:	0015      	movs	r5, r2
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	dad4      	bge.n	8000560 <__udivmoddi4+0x12c>
 80005b6:	4642      	mov	r2, r8
 80005b8:	002f      	movs	r7, r5
 80005ba:	2320      	movs	r3, #32
 80005bc:	0026      	movs	r6, r4
 80005be:	4097      	lsls	r7, r2
 80005c0:	1a9b      	subs	r3, r3, r2
 80005c2:	40de      	lsrs	r6, r3
 80005c4:	003b      	movs	r3, r7
 80005c6:	4333      	orrs	r3, r6
 80005c8:	e7cd      	b.n	8000566 <__udivmoddi4+0x132>
 80005ca:	46c0      	nop			; (mov r8, r8)

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	1c08      	adds	r0, r1, #0
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <display_write_command>:

// Screen object
static DISPLAY_t DISPLAY;

// Send a byte to the command register
void display_write_command(uint8_t byte) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af04      	add	r7, sp, #16
 8000626:	0002      	movs	r2, r0
 8000628:	1dfb      	adds	r3, r7, #7
 800062a:	701a      	strb	r2, [r3, #0]
    HAL_I2C_Mem_Write(&DISPLAY_I2C_PORT, DISPLAY_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800062c:	4808      	ldr	r0, [pc, #32]	; (8000650 <display_write_command+0x30>)
 800062e:	2301      	movs	r3, #1
 8000630:	425b      	negs	r3, r3
 8000632:	9302      	str	r3, [sp, #8]
 8000634:	2301      	movs	r3, #1
 8000636:	9301      	str	r3, [sp, #4]
 8000638:	1dfb      	adds	r3, r7, #7
 800063a:	9300      	str	r3, [sp, #0]
 800063c:	2301      	movs	r3, #1
 800063e:	2200      	movs	r2, #0
 8000640:	2178      	movs	r1, #120	; 0x78
 8000642:	f001 f9b3 	bl	80019ac <HAL_I2C_Mem_Write>
}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b002      	add	sp, #8
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	20000438 	.word	0x20000438

08000654 <display_write_data>:

// Send data
void display_write_data(uint8_t* buffer, size_t buff_size) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af04      	add	r7, sp, #16
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&DISPLAY_I2C_PORT, DISPLAY_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	b29b      	uxth	r3, r3
 8000662:	4808      	ldr	r0, [pc, #32]	; (8000684 <display_write_data+0x30>)
 8000664:	2201      	movs	r2, #1
 8000666:	4252      	negs	r2, r2
 8000668:	9202      	str	r2, [sp, #8]
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	2301      	movs	r3, #1
 8000672:	2240      	movs	r2, #64	; 0x40
 8000674:	2178      	movs	r1, #120	; 0x78
 8000676:	f001 f999 	bl	80019ac <HAL_I2C_Mem_Write>
}
 800067a:	46c0      	nop			; (mov r8, r8)
 800067c:	46bd      	mov	sp, r7
 800067e:	b002      	add	sp, #8
 8000680:	bd80      	pop	{r7, pc}
 8000682:	46c0      	nop			; (mov r8, r8)
 8000684:	20000438 	.word	0x20000438

08000688 <display_init>:

    return ret;
}

// Initialize the oled screen
void display_init(void) {
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0

    // Wait for the screen to boot
    HAL_Delay(100);
 800068c:	2064      	movs	r0, #100	; 0x64
 800068e:	f000 fe9d 	bl	80013cc <HAL_Delay>

    // Init OLED
    display_set_on(0); //display off
 8000692:	2000      	movs	r0, #0
 8000694:	f000 f9e2 	bl	8000a5c <display_set_on>

    display_write_command(0x20); //Set Memory Addressing Mode
 8000698:	2020      	movs	r0, #32
 800069a:	f7ff ffc1 	bl	8000620 <display_write_command>
    display_write_command(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff ffbe 	bl	8000620 <display_write_command>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    display_write_command(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80006a4:	20b0      	movs	r0, #176	; 0xb0
 80006a6:	f7ff ffbb 	bl	8000620 <display_write_command>

#ifdef SSD1306_MIRROR_VERT
    display_write_command(0xC0); // Mirror vertically
#else
    display_write_command(0xC8); //Set COM Output Scan Direction
 80006aa:	20c8      	movs	r0, #200	; 0xc8
 80006ac:	f7ff ffb8 	bl	8000620 <display_write_command>
#endif

    display_write_command(0x00); //---set low column address
 80006b0:	2000      	movs	r0, #0
 80006b2:	f7ff ffb5 	bl	8000620 <display_write_command>
    display_write_command(0x10); //---set high column address
 80006b6:	2010      	movs	r0, #16
 80006b8:	f7ff ffb2 	bl	8000620 <display_write_command>

    display_write_command(0x40); //--set start line address - CHECK
 80006bc:	2040      	movs	r0, #64	; 0x40
 80006be:	f7ff ffaf 	bl	8000620 <display_write_command>

    display_set_contrast(0xFF);
 80006c2:	20ff      	movs	r0, #255	; 0xff
 80006c4:	f000 f9b2 	bl	8000a2c <display_set_contrast>

#ifdef SSD1306_MIRROR_HORIZ
    display_write_command(0xA0); // Mirror horizontally
#else
    display_write_command(0xA1); //--set segment re-map 0 to 127 - CHECK
 80006c8:	20a1      	movs	r0, #161	; 0xa1
 80006ca:	f7ff ffa9 	bl	8000620 <display_write_command>
#endif

#ifdef SSD1306_INVERSE_COLOR
    display_write_command(0xA7); //--set inverse color
#else
    display_write_command(0xA6); //--set normal color
 80006ce:	20a6      	movs	r0, #166	; 0xa6
 80006d0:	f7ff ffa6 	bl	8000620 <display_write_command>
// Set multiplex ratio.
#if (DISPLAY_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    display_write_command(0xFF);
#else
    display_write_command(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80006d4:	20a8      	movs	r0, #168	; 0xa8
 80006d6:	f7ff ffa3 	bl	8000620 <display_write_command>
#endif

#if (DISPLAY_HEIGHT == 32)
    display_write_command(0x1F); //
#elif (DISPLAY_HEIGHT == 64)
    display_write_command(0x3F); //
 80006da:	203f      	movs	r0, #63	; 0x3f
 80006dc:	f7ff ffa0 	bl	8000620 <display_write_command>
    display_write_command(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    display_write_command(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80006e0:	20a4      	movs	r0, #164	; 0xa4
 80006e2:	f7ff ff9d 	bl	8000620 <display_write_command>

    display_write_command(0xD3); //-set display offset - CHECK
 80006e6:	20d3      	movs	r0, #211	; 0xd3
 80006e8:	f7ff ff9a 	bl	8000620 <display_write_command>
    display_write_command(0x00); //-not offset
 80006ec:	2000      	movs	r0, #0
 80006ee:	f7ff ff97 	bl	8000620 <display_write_command>

    display_write_command(0xD5); //--set display clock divide ratio/oscillator frequency
 80006f2:	20d5      	movs	r0, #213	; 0xd5
 80006f4:	f7ff ff94 	bl	8000620 <display_write_command>
    display_write_command(0xF0); //--set divide ratio
 80006f8:	20f0      	movs	r0, #240	; 0xf0
 80006fa:	f7ff ff91 	bl	8000620 <display_write_command>

    display_write_command(0xD9); //--set pre-charge period
 80006fe:	20d9      	movs	r0, #217	; 0xd9
 8000700:	f7ff ff8e 	bl	8000620 <display_write_command>
    display_write_command(0x22); //
 8000704:	2022      	movs	r0, #34	; 0x22
 8000706:	f7ff ff8b 	bl	8000620 <display_write_command>

    display_write_command(0xDA); //--set com pins hardware configuration - CHECK
 800070a:	20da      	movs	r0, #218	; 0xda
 800070c:	f7ff ff88 	bl	8000620 <display_write_command>
#if (DISPLAY_HEIGHT == 32)
    display_write_command(0x02);
#elif (DISPLAY_HEIGHT == 64)
    display_write_command(0x12);
 8000710:	2012      	movs	r0, #18
 8000712:	f7ff ff85 	bl	8000620 <display_write_command>
    display_write_command(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    display_write_command(0xDB); //--set vcomh
 8000716:	20db      	movs	r0, #219	; 0xdb
 8000718:	f7ff ff82 	bl	8000620 <display_write_command>
    display_write_command(0x20); //0x20,0.77xVcc
 800071c:	2020      	movs	r0, #32
 800071e:	f7ff ff7f 	bl	8000620 <display_write_command>

    display_write_command(0x8D); //--set DC-DC enable
 8000722:	208d      	movs	r0, #141	; 0x8d
 8000724:	f7ff ff7c 	bl	8000620 <display_write_command>
    display_write_command(0x14); //
 8000728:	2014      	movs	r0, #20
 800072a:	f7ff ff79 	bl	8000620 <display_write_command>
    display_set_on(1); //--turn on SSD1306 panel
 800072e:	2001      	movs	r0, #1
 8000730:	f000 f994 	bl	8000a5c <display_set_on>

    // Clear screen
    display_fill(Black);
 8000734:	2000      	movs	r0, #0
 8000736:	f000 f82b 	bl	8000790 <display_fill>

    // Flush buffer to screen
    display_update();
 800073a:	f000 f84d 	bl	80007d8 <display_update>

    // Set default values for screen object
    DISPLAY.CurrentX = 0;
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <display_init+0xd0>)
 8000740:	2200      	movs	r2, #0
 8000742:	801a      	strh	r2, [r3, #0]
    DISPLAY.CurrentY = 0;
 8000744:	4b04      	ldr	r3, [pc, #16]	; (8000758 <display_init+0xd0>)
 8000746:	2200      	movs	r2, #0
 8000748:	805a      	strh	r2, [r3, #2]

    DISPLAY.Initialized = 1;
 800074a:	4b03      	ldr	r3, [pc, #12]	; (8000758 <display_init+0xd0>)
 800074c:	2201      	movs	r2, #1
 800074e:	711a      	strb	r2, [r3, #4]
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	20000430 	.word	0x20000430

0800075c <display_set_cursor>:

// Position the cursor
void display_set_cursor(uint8_t x, uint8_t y) {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	0002      	movs	r2, r0
 8000764:	1dfb      	adds	r3, r7, #7
 8000766:	701a      	strb	r2, [r3, #0]
 8000768:	1dbb      	adds	r3, r7, #6
 800076a:	1c0a      	adds	r2, r1, #0
 800076c:	701a      	strb	r2, [r3, #0]

	DISPLAY.CurrentX = x;
 800076e:	1dfb      	adds	r3, r7, #7
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b29a      	uxth	r2, r3
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <display_set_cursor+0x30>)
 8000776:	801a      	strh	r2, [r3, #0]
	DISPLAY.CurrentY = y;
 8000778:	1dbb      	adds	r3, r7, #6
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	b29a      	uxth	r2, r3
 800077e:	4b03      	ldr	r3, [pc, #12]	; (800078c <display_set_cursor+0x30>)
 8000780:	805a      	strh	r2, [r3, #2]
}
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	46bd      	mov	sp, r7
 8000786:	b002      	add	sp, #8
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	20000430 	.word	0x20000430

08000790 <display_fill>:

// Fill the whole screen with the given color
void display_fill(DISPLAY_COLOR color) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	0002      	movs	r2, r0
 8000798:	1dfb      	adds	r3, r7, #7
 800079a:	701a      	strb	r2, [r3, #0]

    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(Display_Buffer); i++) {
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	e00e      	b.n	80007c0 <display_fill+0x30>
        Display_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80007a2:	1dfb      	adds	r3, r7, #7
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d101      	bne.n	80007ae <display_fill+0x1e>
 80007aa:	2100      	movs	r1, #0
 80007ac:	e000      	b.n	80007b0 <display_fill+0x20>
 80007ae:	21ff      	movs	r1, #255	; 0xff
 80007b0:	4a08      	ldr	r2, [pc, #32]	; (80007d4 <display_fill+0x44>)
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	18d3      	adds	r3, r2, r3
 80007b6:	1c0a      	adds	r2, r1, #0
 80007b8:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(Display_Buffer); i++) {
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	3301      	adds	r3, #1
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fa      	ldr	r2, [r7, #12]
 80007c2:	2380      	movs	r3, #128	; 0x80
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d3eb      	bcc.n	80007a2 <display_fill+0x12>
    }
}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46c0      	nop			; (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b004      	add	sp, #16
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	20000030 	.word	0x20000030

080007d8 <display_update>:

// Write the screenbuffer with changed to the screen
void display_update(void) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < DISPLAY_HEIGHT/8; i++) {
 80007de:	1dfb      	adds	r3, r7, #7
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]
 80007e4:	e01a      	b.n	800081c <display_update+0x44>
    	display_write_command(0xB0 + i); // Set the current RAM page address.
 80007e6:	1dfb      	adds	r3, r7, #7
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	3b50      	subs	r3, #80	; 0x50
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	0018      	movs	r0, r3
 80007f0:	f7ff ff16 	bl	8000620 <display_write_command>
    	display_write_command(0x00);
 80007f4:	2000      	movs	r0, #0
 80007f6:	f7ff ff13 	bl	8000620 <display_write_command>
    	display_write_command(0x10);
 80007fa:	2010      	movs	r0, #16
 80007fc:	f7ff ff10 	bl	8000620 <display_write_command>
        display_write_data(&Display_Buffer[DISPLAY_WIDTH*i], DISPLAY_WIDTH);
 8000800:	1dfb      	adds	r3, r7, #7
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	01da      	lsls	r2, r3, #7
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <display_update+0x58>)
 8000808:	18d3      	adds	r3, r2, r3
 800080a:	2180      	movs	r1, #128	; 0x80
 800080c:	0018      	movs	r0, r3
 800080e:	f7ff ff21 	bl	8000654 <display_write_data>
    for(uint8_t i = 0; i < DISPLAY_HEIGHT/8; i++) {
 8000812:	1dfb      	adds	r3, r7, #7
 8000814:	781a      	ldrb	r2, [r3, #0]
 8000816:	1dfb      	adds	r3, r7, #7
 8000818:	3201      	adds	r2, #1
 800081a:	701a      	strb	r2, [r3, #0]
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	2b07      	cmp	r3, #7
 8000822:	d9e0      	bls.n	80007e6 <display_update+0xe>
    }
}
 8000824:	46c0      	nop			; (mov r8, r8)
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b002      	add	sp, #8
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	20000030 	.word	0x20000030

08000834 <display_draw_pixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void display_draw_pixel(uint8_t x, uint8_t y, DISPLAY_COLOR color) {
 8000834:	b590      	push	{r4, r7, lr}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	0004      	movs	r4, r0
 800083c:	0008      	movs	r0, r1
 800083e:	0011      	movs	r1, r2
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	1c22      	adds	r2, r4, #0
 8000844:	701a      	strb	r2, [r3, #0]
 8000846:	1dbb      	adds	r3, r7, #6
 8000848:	1c02      	adds	r2, r0, #0
 800084a:	701a      	strb	r2, [r3, #0]
 800084c:	1d7b      	adds	r3, r7, #5
 800084e:	1c0a      	adds	r2, r1, #0
 8000850:	701a      	strb	r2, [r3, #0]

    if(x >= DISPLAY_WIDTH || y >= DISPLAY_HEIGHT) {
 8000852:	1dfb      	adds	r3, r7, #7
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	b25b      	sxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	db47      	blt.n	80008ec <display_draw_pixel+0xb8>
 800085c:	1dbb      	adds	r3, r7, #6
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	2b3f      	cmp	r3, #63	; 0x3f
 8000862:	d843      	bhi.n	80008ec <display_draw_pixel+0xb8>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8000864:	1d7b      	adds	r3, r7, #5
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d11e      	bne.n	80008aa <display_draw_pixel+0x76>
        Display_Buffer[x + (y / 8) * DISPLAY_WIDTH] |= 1 << (y % 8);
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	781a      	ldrb	r2, [r3, #0]
 8000870:	1dbb      	adds	r3, r7, #6
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	08db      	lsrs	r3, r3, #3
 8000876:	b2d8      	uxtb	r0, r3
 8000878:	0003      	movs	r3, r0
 800087a:	01db      	lsls	r3, r3, #7
 800087c:	18d3      	adds	r3, r2, r3
 800087e:	4a1d      	ldr	r2, [pc, #116]	; (80008f4 <display_draw_pixel+0xc0>)
 8000880:	5cd3      	ldrb	r3, [r2, r3]
 8000882:	b25a      	sxtb	r2, r3
 8000884:	1dbb      	adds	r3, r7, #6
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2107      	movs	r1, #7
 800088a:	400b      	ands	r3, r1
 800088c:	2101      	movs	r1, #1
 800088e:	4099      	lsls	r1, r3
 8000890:	000b      	movs	r3, r1
 8000892:	b25b      	sxtb	r3, r3
 8000894:	4313      	orrs	r3, r2
 8000896:	b259      	sxtb	r1, r3
 8000898:	1dfb      	adds	r3, r7, #7
 800089a:	781a      	ldrb	r2, [r3, #0]
 800089c:	0003      	movs	r3, r0
 800089e:	01db      	lsls	r3, r3, #7
 80008a0:	18d3      	adds	r3, r2, r3
 80008a2:	b2c9      	uxtb	r1, r1
 80008a4:	4a13      	ldr	r2, [pc, #76]	; (80008f4 <display_draw_pixel+0xc0>)
 80008a6:	54d1      	strb	r1, [r2, r3]
 80008a8:	e021      	b.n	80008ee <display_draw_pixel+0xba>
    }
    else {
        Display_Buffer[x + (y / 8) * DISPLAY_WIDTH] &= ~(1 << (y % 8));
 80008aa:	1dfb      	adds	r3, r7, #7
 80008ac:	781a      	ldrb	r2, [r3, #0]
 80008ae:	1dbb      	adds	r3, r7, #6
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	08db      	lsrs	r3, r3, #3
 80008b4:	b2d8      	uxtb	r0, r3
 80008b6:	0003      	movs	r3, r0
 80008b8:	01db      	lsls	r3, r3, #7
 80008ba:	18d3      	adds	r3, r2, r3
 80008bc:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <display_draw_pixel+0xc0>)
 80008be:	5cd3      	ldrb	r3, [r2, r3]
 80008c0:	b25b      	sxtb	r3, r3
 80008c2:	1dba      	adds	r2, r7, #6
 80008c4:	7812      	ldrb	r2, [r2, #0]
 80008c6:	2107      	movs	r1, #7
 80008c8:	400a      	ands	r2, r1
 80008ca:	2101      	movs	r1, #1
 80008cc:	4091      	lsls	r1, r2
 80008ce:	000a      	movs	r2, r1
 80008d0:	b252      	sxtb	r2, r2
 80008d2:	43d2      	mvns	r2, r2
 80008d4:	b252      	sxtb	r2, r2
 80008d6:	4013      	ands	r3, r2
 80008d8:	b259      	sxtb	r1, r3
 80008da:	1dfb      	adds	r3, r7, #7
 80008dc:	781a      	ldrb	r2, [r3, #0]
 80008de:	0003      	movs	r3, r0
 80008e0:	01db      	lsls	r3, r3, #7
 80008e2:	18d3      	adds	r3, r2, r3
 80008e4:	b2c9      	uxtb	r1, r1
 80008e6:	4a03      	ldr	r2, [pc, #12]	; (80008f4 <display_draw_pixel+0xc0>)
 80008e8:	54d1      	strb	r1, [r2, r3]
 80008ea:	e000      	b.n	80008ee <display_draw_pixel+0xba>
        return;
 80008ec:	46c0      	nop			; (mov r8, r8)
    }
}
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b003      	add	sp, #12
 80008f2:	bd90      	pop	{r4, r7, pc}
 80008f4:	20000030 	.word	0x20000030

080008f8 <display_write_char>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char display_write_char(char ch, FontDef Font, DISPLAY_COLOR color) {
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b089      	sub	sp, #36	; 0x24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	0004      	movs	r4, r0
 8000900:	1d38      	adds	r0, r7, #4
 8000902:	6001      	str	r1, [r0, #0]
 8000904:	6042      	str	r2, [r0, #4]
 8000906:	0019      	movs	r1, r3
 8000908:	200f      	movs	r0, #15
 800090a:	183b      	adds	r3, r7, r0
 800090c:	1c22      	adds	r2, r4, #0
 800090e:	701a      	strb	r2, [r3, #0]
 8000910:	230e      	movs	r3, #14
 8000912:	18fb      	adds	r3, r7, r3
 8000914:	1c0a      	adds	r2, r1, #0
 8000916:	701a      	strb	r2, [r3, #0]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000918:	183b      	adds	r3, r7, r0
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b1f      	cmp	r3, #31
 800091e:	d903      	bls.n	8000928 <display_write_char+0x30>
 8000920:	183b      	adds	r3, r7, r0
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b7e      	cmp	r3, #126	; 0x7e
 8000926:	d901      	bls.n	800092c <display_write_char+0x34>
        return 0;
 8000928:	2300      	movs	r3, #0
 800092a:	e078      	b.n	8000a1e <display_write_char+0x126>

    // Check remaining space on current line
    if (DISPLAY_WIDTH < (DISPLAY.CurrentX + Font.FontWidth) || DISPLAY_HEIGHT < (DISPLAY.CurrentY + Font.FontHeight)) {
 800092c:	4b3e      	ldr	r3, [pc, #248]	; (8000a28 <display_write_char+0x130>)
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	001a      	movs	r2, r3
 8000932:	1d3b      	adds	r3, r7, #4
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	18d3      	adds	r3, r2, r3
 8000938:	2b80      	cmp	r3, #128	; 0x80
 800093a:	dc07      	bgt.n	800094c <display_write_char+0x54>
 800093c:	4b3a      	ldr	r3, [pc, #232]	; (8000a28 <display_write_char+0x130>)
 800093e:	885b      	ldrh	r3, [r3, #2]
 8000940:	001a      	movs	r2, r3
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	785b      	ldrb	r3, [r3, #1]
 8000946:	18d3      	adds	r3, r2, r3
 8000948:	2b40      	cmp	r3, #64	; 0x40
 800094a:	dd01      	ble.n	8000950 <display_write_char+0x58>
        // Not enough space on current line
        return 0;
 800094c:	2300      	movs	r3, #0
 800094e:	e066      	b.n	8000a1e <display_write_char+0x126>
    }

    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000950:	2300      	movs	r3, #0
 8000952:	61fb      	str	r3, [r7, #28]
 8000954:	e051      	b.n	80009fa <display_write_char+0x102>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	685a      	ldr	r2, [r3, #4]
 800095a:	230f      	movs	r3, #15
 800095c:	18fb      	adds	r3, r7, r3
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	3b20      	subs	r3, #32
 8000962:	1d39      	adds	r1, r7, #4
 8000964:	7849      	ldrb	r1, [r1, #1]
 8000966:	434b      	muls	r3, r1
 8000968:	0019      	movs	r1, r3
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	18cb      	adds	r3, r1, r3
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	18d3      	adds	r3, r2, r3
 8000972:	881b      	ldrh	r3, [r3, #0]
 8000974:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
 800097a:	e035      	b.n	80009e8 <display_write_char+0xf0>
            if((b << j) & 0x8000)  {
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	409a      	lsls	r2, r3
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	021b      	lsls	r3, r3, #8
 8000986:	4013      	ands	r3, r2
 8000988:	d014      	beq.n	80009b4 <display_write_char+0xbc>
            	display_draw_pixel(DISPLAY.CurrentX + j, (DISPLAY.CurrentY + i), (DISPLAY_COLOR) color);
 800098a:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <display_write_char+0x130>)
 800098c:	881b      	ldrh	r3, [r3, #0]
 800098e:	b2da      	uxtb	r2, r3
 8000990:	69bb      	ldr	r3, [r7, #24]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	18d3      	adds	r3, r2, r3
 8000996:	b2d8      	uxtb	r0, r3
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <display_write_char+0x130>)
 800099a:	885b      	ldrh	r3, [r3, #2]
 800099c:	b2da      	uxtb	r2, r3
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	b2db      	uxtb	r3, r3
 80009a2:	18d3      	adds	r3, r2, r3
 80009a4:	b2d9      	uxtb	r1, r3
 80009a6:	230e      	movs	r3, #14
 80009a8:	18fb      	adds	r3, r7, r3
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	001a      	movs	r2, r3
 80009ae:	f7ff ff41 	bl	8000834 <display_draw_pixel>
 80009b2:	e016      	b.n	80009e2 <display_write_char+0xea>
            } else {
            	display_draw_pixel(DISPLAY.CurrentX + j, (DISPLAY.CurrentY + i), (DISPLAY_COLOR)!color);
 80009b4:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <display_write_char+0x130>)
 80009b6:	881b      	ldrh	r3, [r3, #0]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	18d3      	adds	r3, r2, r3
 80009c0:	b2d8      	uxtb	r0, r3
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <display_write_char+0x130>)
 80009c4:	885b      	ldrh	r3, [r3, #2]
 80009c6:	b2da      	uxtb	r2, r3
 80009c8:	69fb      	ldr	r3, [r7, #28]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	18d3      	adds	r3, r2, r3
 80009ce:	b2d9      	uxtb	r1, r3
 80009d0:	230e      	movs	r3, #14
 80009d2:	18fb      	adds	r3, r7, r3
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	425a      	negs	r2, r3
 80009d8:	4153      	adcs	r3, r2
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	001a      	movs	r2, r3
 80009de:	f7ff ff29 	bl	8000834 <display_draw_pixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	3301      	adds	r3, #1
 80009e6:	61bb      	str	r3, [r7, #24]
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	001a      	movs	r2, r3
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d3c3      	bcc.n	800097c <display_write_char+0x84>
    for(i = 0; i < Font.FontHeight; i++) {
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	3301      	adds	r3, #1
 80009f8:	61fb      	str	r3, [r7, #28]
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	785b      	ldrb	r3, [r3, #1]
 80009fe:	001a      	movs	r2, r3
 8000a00:	69fb      	ldr	r3, [r7, #28]
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d3a7      	bcc.n	8000956 <display_write_char+0x5e>
            }
        }
    }

    // The current space is now taken
    DISPLAY.CurrentX += Font.FontWidth;
 8000a06:	4b08      	ldr	r3, [pc, #32]	; (8000a28 <display_write_char+0x130>)
 8000a08:	881a      	ldrh	r2, [r3, #0]
 8000a0a:	1d3b      	adds	r3, r7, #4
 8000a0c:	781b      	ldrb	r3, [r3, #0]
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	18d3      	adds	r3, r2, r3
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <display_write_char+0x130>)
 8000a16:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8000a18:	230f      	movs	r3, #15
 8000a1a:	18fb      	adds	r3, r7, r3
 8000a1c:	781b      	ldrb	r3, [r3, #0]
}
 8000a1e:	0018      	movs	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b009      	add	sp, #36	; 0x24
 8000a24:	bd90      	pop	{r4, r7, pc}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	20000430 	.word	0x20000430

08000a2c <display_set_contrast>:

void display_set_contrast(const uint8_t value) {
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	0002      	movs	r2, r0
 8000a34:	1dfb      	adds	r3, r7, #7
 8000a36:	701a      	strb	r2, [r3, #0]

    const uint8_t kSetContrastControlRegister = 0x81;
 8000a38:	210f      	movs	r1, #15
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2281      	movs	r2, #129	; 0x81
 8000a3e:	701a      	strb	r2, [r3, #0]
    display_write_command(kSetContrastControlRegister);
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	781b      	ldrb	r3, [r3, #0]
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff fdeb 	bl	8000620 <display_write_command>
    display_write_command(value);
 8000a4a:	1dfb      	adds	r3, r7, #7
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f7ff fde6 	bl	8000620 <display_write_command>
}
 8000a54:	46c0      	nop			; (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	b004      	add	sp, #16
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <display_set_on>:

void display_set_on(const uint8_t on) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	0002      	movs	r2, r0
 8000a64:	1dfb      	adds	r3, r7, #7
 8000a66:	701a      	strb	r2, [r3, #0]

    uint8_t value;
    if (on) {
 8000a68:	1dfb      	adds	r3, r7, #7
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d007      	beq.n	8000a80 <display_set_on+0x24>
        value = 0xAF;   // Display on
 8000a70:	230f      	movs	r3, #15
 8000a72:	18fb      	adds	r3, r7, r3
 8000a74:	22af      	movs	r2, #175	; 0xaf
 8000a76:	701a      	strb	r2, [r3, #0]
        DISPLAY.DisplayOn = 1;
 8000a78:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <display_set_on+0x48>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	715a      	strb	r2, [r3, #5]
 8000a7e:	e006      	b.n	8000a8e <display_set_on+0x32>
    } else {
        value = 0xAE;   // Display off
 8000a80:	230f      	movs	r3, #15
 8000a82:	18fb      	adds	r3, r7, r3
 8000a84:	22ae      	movs	r2, #174	; 0xae
 8000a86:	701a      	strb	r2, [r3, #0]
        DISPLAY.DisplayOn = 0;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <display_set_on+0x48>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	715a      	strb	r2, [r3, #5]
    }
    display_write_command(value);
 8000a8e:	230f      	movs	r3, #15
 8000a90:	18fb      	adds	r3, r7, r3
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	0018      	movs	r0, r3
 8000a96:	f7ff fdc3 	bl	8000620 <display_write_command>
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	b004      	add	sp, #16
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	20000430 	.word	0x20000430

08000aa8 <DrawMeteor>:
/**
  * @brief  The application entry point.
  * @retval int
  */

void DrawMeteor() {
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0

	  // Draw a little square
	  for(uint8_t x=35; x<=45; x++) {
 8000aae:	230f      	movs	r3, #15
 8000ab0:	18fb      	adds	r3, r7, r3
 8000ab2:	2223      	movs	r2, #35	; 0x23
 8000ab4:	701a      	strb	r2, [r3, #0]
 8000ab6:	e01e      	b.n	8000af6 <DrawMeteor+0x4e>
		  for(uint8_t y=38; y<=62; y++) {
 8000ab8:	230e      	movs	r3, #14
 8000aba:	18fb      	adds	r3, r7, r3
 8000abc:	2226      	movs	r2, #38	; 0x26
 8000abe:	701a      	strb	r2, [r3, #0]
 8000ac0:	e00e      	b.n	8000ae0 <DrawMeteor+0x38>
			  display_draw_pixel(x, y, White);
 8000ac2:	240e      	movs	r4, #14
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	7819      	ldrb	r1, [r3, #0]
 8000ac8:	230f      	movs	r3, #15
 8000aca:	18fb      	adds	r3, r7, r3
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2201      	movs	r2, #1
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f7ff feaf 	bl	8000834 <display_draw_pixel>
		  for(uint8_t y=38; y<=62; y++) {
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	781a      	ldrb	r2, [r3, #0]
 8000ada:	193b      	adds	r3, r7, r4
 8000adc:	3201      	adds	r2, #1
 8000ade:	701a      	strb	r2, [r3, #0]
 8000ae0:	230e      	movs	r3, #14
 8000ae2:	18fb      	adds	r3, r7, r3
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	2b3e      	cmp	r3, #62	; 0x3e
 8000ae8:	d9eb      	bls.n	8000ac2 <DrawMeteor+0x1a>
	  for(uint8_t x=35; x<=45; x++) {
 8000aea:	210f      	movs	r1, #15
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	781a      	ldrb	r2, [r3, #0]
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	3201      	adds	r2, #1
 8000af4:	701a      	strb	r2, [r3, #0]
 8000af6:	230f      	movs	r3, #15
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b2d      	cmp	r3, #45	; 0x2d
 8000afe:	d9db      	bls.n	8000ab8 <DrawMeteor+0x10>
		  }
	  }

	  // Draw a little square
	  for(uint8_t x=37; x<=43; x++) {
 8000b00:	230d      	movs	r3, #13
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	2225      	movs	r2, #37	; 0x25
 8000b06:	701a      	strb	r2, [r3, #0]
 8000b08:	e01e      	b.n	8000b48 <DrawMeteor+0xa0>
		  for(uint8_t y=42; y<=58; y++) {
 8000b0a:	230c      	movs	r3, #12
 8000b0c:	18fb      	adds	r3, r7, r3
 8000b0e:	222a      	movs	r2, #42	; 0x2a
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	e00e      	b.n	8000b32 <DrawMeteor+0x8a>
			  display_draw_pixel(x, y, Black);
 8000b14:	240c      	movs	r4, #12
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	7819      	ldrb	r1, [r3, #0]
 8000b1a:	230d      	movs	r3, #13
 8000b1c:	18fb      	adds	r3, r7, r3
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2200      	movs	r2, #0
 8000b22:	0018      	movs	r0, r3
 8000b24:	f7ff fe86 	bl	8000834 <display_draw_pixel>
		  for(uint8_t y=42; y<=58; y++) {
 8000b28:	193b      	adds	r3, r7, r4
 8000b2a:	781a      	ldrb	r2, [r3, #0]
 8000b2c:	193b      	adds	r3, r7, r4
 8000b2e:	3201      	adds	r2, #1
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	230c      	movs	r3, #12
 8000b34:	18fb      	adds	r3, r7, r3
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b3a      	cmp	r3, #58	; 0x3a
 8000b3a:	d9eb      	bls.n	8000b14 <DrawMeteor+0x6c>
	  for(uint8_t x=37; x<=43; x++) {
 8000b3c:	210d      	movs	r1, #13
 8000b3e:	187b      	adds	r3, r7, r1
 8000b40:	781a      	ldrb	r2, [r3, #0]
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	3201      	adds	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
 8000b48:	230d      	movs	r3, #13
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b2b      	cmp	r3, #43	; 0x2b
 8000b50:	d9db      	bls.n	8000b0a <DrawMeteor+0x62>
		  }
	  }

	  // Draw a diagonal line
	  for(uint8_t x=0; x<=20; x++) {
 8000b52:	230b      	movs	r3, #11
 8000b54:	18fb      	adds	r3, r7, r3
 8000b56:	2200      	movs	r2, #0
 8000b58:	701a      	strb	r2, [r3, #0]
 8000b5a:	e00e      	b.n	8000b7a <DrawMeteor+0xd2>
		  display_draw_pixel(x, x, White);
 8000b5c:	240b      	movs	r4, #11
 8000b5e:	193b      	adds	r3, r7, r4
 8000b60:	7819      	ldrb	r1, [r3, #0]
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	2201      	movs	r2, #1
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f7ff fe63 	bl	8000834 <display_draw_pixel>
	  for(uint8_t x=0; x<=20; x++) {
 8000b6e:	0021      	movs	r1, r4
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	781a      	ldrb	r2, [r3, #0]
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	3201      	adds	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
 8000b7a:	230b      	movs	r3, #11
 8000b7c:	18fb      	adds	r3, r7, r3
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b14      	cmp	r3, #20
 8000b82:	d9eb      	bls.n	8000b5c <DrawMeteor+0xb4>
	  }

	  for(uint8_t x=0; x<=30; x++) {
 8000b84:	230a      	movs	r3, #10
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
 8000b8c:	e011      	b.n	8000bb2 <DrawMeteor+0x10a>
		  display_draw_pixel(x, x+20, White);
 8000b8e:	220a      	movs	r2, #10
 8000b90:	18bb      	adds	r3, r7, r2
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	3314      	adds	r3, #20
 8000b96:	b2d9      	uxtb	r1, r3
 8000b98:	0014      	movs	r4, r2
 8000b9a:	18bb      	adds	r3, r7, r2
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f7ff fe47 	bl	8000834 <display_draw_pixel>
	  for(uint8_t x=0; x<=30; x++) {
 8000ba6:	0021      	movs	r1, r4
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	781a      	ldrb	r2, [r3, #0]
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	3201      	adds	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
 8000bb2:	230a      	movs	r3, #10
 8000bb4:	18fb      	adds	r3, r7, r3
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b1e      	cmp	r3, #30
 8000bba:	d9e8      	bls.n	8000b8e <DrawMeteor+0xe6>
	  }

	  for(uint8_t x=0; x<=10; x++) {
 8000bbc:	2309      	movs	r3, #9
 8000bbe:	18fb      	adds	r3, r7, r3
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	701a      	strb	r2, [r3, #0]
 8000bc4:	e011      	b.n	8000bea <DrawMeteor+0x142>
		  display_draw_pixel(x+10, x, White);
 8000bc6:	2209      	movs	r2, #9
 8000bc8:	18bb      	adds	r3, r7, r2
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	330a      	adds	r3, #10
 8000bce:	b2d8      	uxtb	r0, r3
 8000bd0:	0014      	movs	r4, r2
 8000bd2:	18bb      	adds	r3, r7, r2
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	0019      	movs	r1, r3
 8000bda:	f7ff fe2b 	bl	8000834 <display_draw_pixel>
	  for(uint8_t x=0; x<=10; x++) {
 8000bde:	0021      	movs	r1, r4
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	781a      	ldrb	r2, [r3, #0]
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	3201      	adds	r2, #1
 8000be8:	701a      	strb	r2, [r3, #0]
 8000bea:	2309      	movs	r3, #9
 8000bec:	18fb      	adds	r3, r7, r3
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b0a      	cmp	r3, #10
 8000bf2:	d9e8      	bls.n	8000bc6 <DrawMeteor+0x11e>
	  }

	  for(uint8_t x=23; x<=30; x++) {
 8000bf4:	2308      	movs	r3, #8
 8000bf6:	18fb      	adds	r3, r7, r3
 8000bf8:	2217      	movs	r2, #23
 8000bfa:	701a      	strb	r2, [r3, #0]
 8000bfc:	e011      	b.n	8000c22 <DrawMeteor+0x17a>
		  display_draw_pixel(x+10, x, White);
 8000bfe:	2208      	movs	r2, #8
 8000c00:	18bb      	adds	r3, r7, r2
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	330a      	adds	r3, #10
 8000c06:	b2d8      	uxtb	r0, r3
 8000c08:	0014      	movs	r4, r2
 8000c0a:	18bb      	adds	r3, r7, r2
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	0019      	movs	r1, r3
 8000c12:	f7ff fe0f 	bl	8000834 <display_draw_pixel>
	  for(uint8_t x=23; x<=30; x++) {
 8000c16:	0021      	movs	r1, r4
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	781a      	ldrb	r2, [r3, #0]
 8000c1c:	187b      	adds	r3, r7, r1
 8000c1e:	3201      	adds	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	2308      	movs	r3, #8
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b1e      	cmp	r3, #30
 8000c2a:	d9e8      	bls.n	8000bfe <DrawMeteor+0x156>
	  }

	  for(uint8_t x=20; x<=30; x++) {
 8000c2c:	1dfb      	adds	r3, r7, #7
 8000c2e:	2214      	movs	r2, #20
 8000c30:	701a      	strb	r2, [r3, #0]
 8000c32:	e00e      	b.n	8000c52 <DrawMeteor+0x1aa>
		  display_draw_pixel(x, x+10, White);
 8000c34:	1dfb      	adds	r3, r7, #7
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	330a      	adds	r3, #10
 8000c3a:	b2d9      	uxtb	r1, r3
 8000c3c:	1dfb      	adds	r3, r7, #7
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2201      	movs	r2, #1
 8000c42:	0018      	movs	r0, r3
 8000c44:	f7ff fdf6 	bl	8000834 <display_draw_pixel>
	  for(uint8_t x=20; x<=30; x++) {
 8000c48:	1dfb      	adds	r3, r7, #7
 8000c4a:	781a      	ldrb	r2, [r3, #0]
 8000c4c:	1dfb      	adds	r3, r7, #7
 8000c4e:	3201      	adds	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b1e      	cmp	r3, #30
 8000c58:	d9ec      	bls.n	8000c34 <DrawMeteor+0x18c>
	  }
}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	46c0      	nop			; (mov r8, r8)
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b005      	add	sp, #20
 8000c62:	bd90      	pop	{r4, r7, pc}

08000c64 <DrawRectangle>:

void DrawRectangle(int xpos, int ypos, int width, int height, char colour) {
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b087      	sub	sp, #28
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	60f8      	str	r0, [r7, #12]
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
 8000c70:	603b      	str	r3, [r7, #0]
	for(uint8_t x=0; x<=width; x++) {
 8000c72:	2317      	movs	r3, #23
 8000c74:	18fb      	adds	r3, r7, r3
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
 8000c7a:	e02c      	b.n	8000cd6 <DrawRectangle+0x72>
		for(uint8_t y=0; y<=height; y++) {
 8000c7c:	2316      	movs	r3, #22
 8000c7e:	18fb      	adds	r3, r7, r3
 8000c80:	2200      	movs	r2, #0
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	e01b      	b.n	8000cbe <DrawRectangle+0x5a>
			display_draw_pixel(x + xpos, y + ypos, colour);
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	2317      	movs	r3, #23
 8000c8c:	18fb      	adds	r3, r7, r3
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	18d3      	adds	r3, r2, r3
 8000c92:	b2d8      	uxtb	r0, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	2416      	movs	r4, #22
 8000c9a:	193b      	adds	r3, r7, r4
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	18d3      	adds	r3, r2, r3
 8000ca0:	b2d9      	uxtb	r1, r3
 8000ca2:	2320      	movs	r3, #32
 8000ca4:	2208      	movs	r2, #8
 8000ca6:	4694      	mov	ip, r2
 8000ca8:	44bc      	add	ip, r7
 8000caa:	4463      	add	r3, ip
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	001a      	movs	r2, r3
 8000cb0:	f7ff fdc0 	bl	8000834 <display_draw_pixel>
		for(uint8_t y=0; y<=height; y++) {
 8000cb4:	193b      	adds	r3, r7, r4
 8000cb6:	781a      	ldrb	r2, [r3, #0]
 8000cb8:	193b      	adds	r3, r7, r4
 8000cba:	3201      	adds	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
 8000cbe:	2316      	movs	r3, #22
 8000cc0:	18fb      	adds	r3, r7, r3
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	dadd      	bge.n	8000c86 <DrawRectangle+0x22>
	for(uint8_t x=0; x<=width; x++) {
 8000cca:	2117      	movs	r1, #23
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	781a      	ldrb	r2, [r3, #0]
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	3201      	adds	r2, #1
 8000cd4:	701a      	strb	r2, [r3, #0]
 8000cd6:	2317      	movs	r3, #23
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	dacc      	bge.n	8000c7c <DrawRectangle+0x18>
		}
	}
}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	46c0      	nop			; (mov r8, r8)
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	b007      	add	sp, #28
 8000cea:	bd90      	pop	{r4, r7, pc}

08000cec <main>:

int main(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af02      	add	r7, sp, #8

  HAL_Init();
 8000cf2:	f000 fae5 	bl	80012c0 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000cf6:	f000 f873 	bl	8000de0 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfa:	f000 f947 	bl	8000f8c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000cfe:	f000 f8b7 	bl	8000e70 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000d02:	f000 f8f5 	bl	8000ef0 <MX_USART1_UART_Init>

  display_init();
 8000d06:	f7ff fcbf 	bl	8000688 <display_init>

  while (1)
  {

	  display_fill(Black);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f7ff fd40 	bl	8000790 <display_fill>

	  DrawMeteor();
 8000d10:	f7ff feca 	bl	8000aa8 <DrawMeteor>
	  DrawRectangle(70, 50, 20, 20, White);
 8000d14:	2301      	movs	r3, #1
 8000d16:	9300      	str	r3, [sp, #0]
 8000d18:	2314      	movs	r3, #20
 8000d1a:	2214      	movs	r2, #20
 8000d1c:	2132      	movs	r1, #50	; 0x32
 8000d1e:	2046      	movs	r0, #70	; 0x46
 8000d20:	f7ff ffa0 	bl	8000c64 <DrawRectangle>

	  display_set_cursor(23, 1);
 8000d24:	2101      	movs	r1, #1
 8000d26:	2017      	movs	r0, #23
 8000d28:	f7ff fd18 	bl	800075c <display_set_cursor>
	  display_write_char('C', Font_11x18, White);
 8000d2c:	4a2b      	ldr	r2, [pc, #172]	; (8000ddc <main+0xf0>)
 8000d2e:	2301      	movs	r3, #1
 8000d30:	6811      	ldr	r1, [r2, #0]
 8000d32:	6852      	ldr	r2, [r2, #4]
 8000d34:	2043      	movs	r0, #67	; 0x43
 8000d36:	f7ff fddf 	bl	80008f8 <display_write_char>

	  display_set_cursor(34, 1);
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	2022      	movs	r0, #34	; 0x22
 8000d3e:	f7ff fd0d 	bl	800075c <display_set_cursor>
	  display_write_char('H', Font_11x18, White);
 8000d42:	4a26      	ldr	r2, [pc, #152]	; (8000ddc <main+0xf0>)
 8000d44:	2301      	movs	r3, #1
 8000d46:	6811      	ldr	r1, [r2, #0]
 8000d48:	6852      	ldr	r2, [r2, #4]
 8000d4a:	2048      	movs	r0, #72	; 0x48
 8000d4c:	f7ff fdd4 	bl	80008f8 <display_write_char>

	  display_set_cursor(45, 1);
 8000d50:	2101      	movs	r1, #1
 8000d52:	202d      	movs	r0, #45	; 0x2d
 8000d54:	f7ff fd02 	bl	800075c <display_set_cursor>
	  display_write_char('E', Font_11x18, White);
 8000d58:	4a20      	ldr	r2, [pc, #128]	; (8000ddc <main+0xf0>)
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	6811      	ldr	r1, [r2, #0]
 8000d5e:	6852      	ldr	r2, [r2, #4]
 8000d60:	2045      	movs	r0, #69	; 0x45
 8000d62:	f7ff fdc9 	bl	80008f8 <display_write_char>

	  display_set_cursor(56, 1);
 8000d66:	2101      	movs	r1, #1
 8000d68:	2038      	movs	r0, #56	; 0x38
 8000d6a:	f7ff fcf7 	bl	800075c <display_set_cursor>
	  display_write_char('R', Font_11x18, White);
 8000d6e:	4a1b      	ldr	r2, [pc, #108]	; (8000ddc <main+0xf0>)
 8000d70:	2301      	movs	r3, #1
 8000d72:	6811      	ldr	r1, [r2, #0]
 8000d74:	6852      	ldr	r2, [r2, #4]
 8000d76:	2052      	movs	r0, #82	; 0x52
 8000d78:	f7ff fdbe 	bl	80008f8 <display_write_char>

	  display_set_cursor(67, 1);
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	2043      	movs	r0, #67	; 0x43
 8000d80:	f7ff fcec 	bl	800075c <display_set_cursor>
	  display_write_char('R', Font_11x18, White);
 8000d84:	4a15      	ldr	r2, [pc, #84]	; (8000ddc <main+0xf0>)
 8000d86:	2301      	movs	r3, #1
 8000d88:	6811      	ldr	r1, [r2, #0]
 8000d8a:	6852      	ldr	r2, [r2, #4]
 8000d8c:	2052      	movs	r0, #82	; 0x52
 8000d8e:	f7ff fdb3 	bl	80008f8 <display_write_char>

	  display_set_cursor(78, 1);
 8000d92:	2101      	movs	r1, #1
 8000d94:	204e      	movs	r0, #78	; 0x4e
 8000d96:	f7ff fce1 	bl	800075c <display_set_cursor>
	  display_write_char('Y', Font_11x18, White);
 8000d9a:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <main+0xf0>)
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	6811      	ldr	r1, [r2, #0]
 8000da0:	6852      	ldr	r2, [r2, #4]
 8000da2:	2059      	movs	r0, #89	; 0x59
 8000da4:	f7ff fda8 	bl	80008f8 <display_write_char>

	  display_set_cursor(89, 1);
 8000da8:	2101      	movs	r1, #1
 8000daa:	2059      	movs	r0, #89	; 0x59
 8000dac:	f7ff fcd6 	bl	800075c <display_set_cursor>
	  display_write_char(':', Font_11x18, White);
 8000db0:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <main+0xf0>)
 8000db2:	2301      	movs	r3, #1
 8000db4:	6811      	ldr	r1, [r2, #0]
 8000db6:	6852      	ldr	r2, [r2, #4]
 8000db8:	203a      	movs	r0, #58	; 0x3a
 8000dba:	f7ff fd9d 	bl	80008f8 <display_write_char>

	  display_set_cursor(100, 1);
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	2064      	movs	r0, #100	; 0x64
 8000dc2:	f7ff fccb 	bl	800075c <display_set_cursor>
	  display_write_char(')', Font_11x18, White);
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <main+0xf0>)
 8000dc8:	2301      	movs	r3, #1
 8000dca:	6811      	ldr	r1, [r2, #0]
 8000dcc:	6852      	ldr	r2, [r2, #4]
 8000dce:	2029      	movs	r0, #41	; 0x29
 8000dd0:	f7ff fd92 	bl	80008f8 <display_write_char>

	  display_update();
 8000dd4:	f7ff fd00 	bl	80007d8 <display_update>
	  display_fill(Black);
 8000dd8:	e797      	b.n	8000d0a <main+0x1e>
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	20000000 	.word	0x20000000

08000de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b093      	sub	sp, #76	; 0x4c
 8000de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de6:	2410      	movs	r4, #16
 8000de8:	193b      	adds	r3, r7, r4
 8000dea:	0018      	movs	r0, r3
 8000dec:	2338      	movs	r3, #56	; 0x38
 8000dee:	001a      	movs	r2, r3
 8000df0:	2100      	movs	r1, #0
 8000df2:	f002 fe49 	bl	8003a88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df6:	003b      	movs	r3, r7
 8000df8:	0018      	movs	r0, r3
 8000dfa:	2310      	movs	r3, #16
 8000dfc:	001a      	movs	r2, r3
 8000dfe:	2100      	movs	r1, #0
 8000e00:	f002 fe42 	bl	8003a88 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e04:	2380      	movs	r3, #128	; 0x80
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f001 f985 	bl	8002118 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e0e:	193b      	adds	r3, r7, r4
 8000e10:	2202      	movs	r2, #2
 8000e12:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e14:	193b      	adds	r3, r7, r4
 8000e16:	2280      	movs	r2, #128	; 0x80
 8000e18:	0052      	lsls	r2, r2, #1
 8000e1a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000e1c:	193b      	adds	r3, r7, r4
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e22:	193b      	adds	r3, r7, r4
 8000e24:	2240      	movs	r2, #64	; 0x40
 8000e26:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e28:	193b      	adds	r3, r7, r4
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2e:	193b      	adds	r3, r7, r4
 8000e30:	0018      	movs	r0, r3
 8000e32:	f001 f9bd 	bl	80021b0 <HAL_RCC_OscConfig>
 8000e36:	1e03      	subs	r3, r0, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000e3a:	f000 f923 	bl	8001084 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3e:	003b      	movs	r3, r7
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e44:	003b      	movs	r3, r7
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4a:	003b      	movs	r3, r7
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e50:	003b      	movs	r3, r7
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e56:	003b      	movs	r3, r7
 8000e58:	2100      	movs	r1, #0
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f001 fcc8 	bl	80027f0 <HAL_RCC_ClockConfig>
 8000e60:	1e03      	subs	r3, r0, #0
 8000e62:	d001      	beq.n	8000e68 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000e64:	f000 f90e 	bl	8001084 <Error_Handler>
  }
}
 8000e68:	46c0      	nop			; (mov r8, r8)
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b013      	add	sp, #76	; 0x4c
 8000e6e:	bd90      	pop	{r4, r7, pc}

08000e70 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0

  hi2c2.Instance = I2C2;
 8000e74:	4b1b      	ldr	r3, [pc, #108]	; (8000ee4 <MX_I2C2_Init+0x74>)
 8000e76:	4a1c      	ldr	r2, [pc, #112]	; (8000ee8 <MX_I2C2_Init+0x78>)
 8000e78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000e7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ee4 <MX_I2C2_Init+0x74>)
 8000e7c:	4a1b      	ldr	r2, [pc, #108]	; (8000eec <MX_I2C2_Init+0x7c>)
 8000e7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e80:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <MX_I2C2_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e86:	4b17      	ldr	r3, [pc, #92]	; (8000ee4 <MX_I2C2_Init+0x74>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <MX_I2C2_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e92:	4b14      	ldr	r3, [pc, #80]	; (8000ee4 <MX_I2C2_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e98:	4b12      	ldr	r3, [pc, #72]	; (8000ee4 <MX_I2C2_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	; (8000ee4 <MX_I2C2_Init+0x74>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	; (8000ee4 <MX_I2C2_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ee4 <MX_I2C2_Init+0x74>)
 8000eac:	0018      	movs	r0, r3
 8000eae:	f000 fce7 	bl	8001880 <HAL_I2C_Init>
 8000eb2:	1e03      	subs	r3, r0, #0
 8000eb4:	d001      	beq.n	8000eba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000eb6:	f000 f8e5 	bl	8001084 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <MX_I2C2_Init+0x74>)
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f001 f892 	bl	8001fe8 <HAL_I2CEx_ConfigAnalogFilter>
 8000ec4:	1e03      	subs	r3, r0, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ec8:	f000 f8dc 	bl	8001084 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <MX_I2C2_Init+0x74>)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f001 f8d5 	bl	8002080 <HAL_I2CEx_ConfigDigitalFilter>
 8000ed6:	1e03      	subs	r3, r0, #0
 8000ed8:	d001      	beq.n	8000ede <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000eda:	f000 f8d3 	bl	8001084 <Error_Handler>
  }

}
 8000ede:	46c0      	nop			; (mov r8, r8)
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	20000438 	.word	0x20000438
 8000ee8:	40005800 	.word	0x40005800
 8000eec:	00303d5b 	.word	0x00303d5b

08000ef0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000ef4:	4b23      	ldr	r3, [pc, #140]	; (8000f84 <MX_USART1_UART_Init+0x94>)
 8000ef6:	4a24      	ldr	r2, [pc, #144]	; (8000f88 <MX_USART1_UART_Init+0x98>)
 8000ef8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000efa:	4b22      	ldr	r3, [pc, #136]	; (8000f84 <MX_USART1_UART_Init+0x94>)
 8000efc:	22e1      	movs	r2, #225	; 0xe1
 8000efe:	0252      	lsls	r2, r2, #9
 8000f00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f02:	4b20      	ldr	r3, [pc, #128]	; (8000f84 <MX_USART1_UART_Init+0x94>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f08:	4b1e      	ldr	r3, [pc, #120]	; (8000f84 <MX_USART1_UART_Init+0x94>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f0e:	4b1d      	ldr	r3, [pc, #116]	; (8000f84 <MX_USART1_UART_Init+0x94>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <MX_USART1_UART_Init+0x94>)
 8000f16:	220c      	movs	r2, #12
 8000f18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <MX_USART1_UART_Init+0x94>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f20:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <MX_USART1_UART_Init+0x94>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f26:	4b17      	ldr	r3, [pc, #92]	; (8000f84 <MX_USART1_UART_Init+0x94>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f2c:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <MX_USART1_UART_Init+0x94>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f32:	4b14      	ldr	r3, [pc, #80]	; (8000f84 <MX_USART1_UART_Init+0x94>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <MX_USART1_UART_Init+0x94>)
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f001 ffba 	bl	8002eb4 <HAL_UART_Init>
 8000f40:	1e03      	subs	r3, r0, #0
 8000f42:	d001      	beq.n	8000f48 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f44:	f000 f89e 	bl	8001084 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_USART1_UART_Init+0x94>)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	f002 fc97 	bl	8003880 <HAL_UARTEx_SetTxFifoThreshold>
 8000f52:	1e03      	subs	r3, r0, #0
 8000f54:	d001      	beq.n	8000f5a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f56:	f000 f895 	bl	8001084 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <MX_USART1_UART_Init+0x94>)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f002 fcce 	bl	8003900 <HAL_UARTEx_SetRxFifoThreshold>
 8000f64:	1e03      	subs	r3, r0, #0
 8000f66:	d001      	beq.n	8000f6c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f68:	f000 f88c 	bl	8001084 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f6c:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <MX_USART1_UART_Init+0x94>)
 8000f6e:	0018      	movs	r0, r3
 8000f70:	f002 fc4c 	bl	800380c <HAL_UARTEx_DisableFifoMode>
 8000f74:	1e03      	subs	r3, r0, #0
 8000f76:	d001      	beq.n	8000f7c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f78:	f000 f884 	bl	8001084 <Error_Handler>
  }

}
 8000f7c:	46c0      	nop			; (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	46c0      	nop			; (mov r8, r8)
 8000f84:	20000484 	.word	0x20000484
 8000f88:	40013800 	.word	0x40013800

08000f8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b089      	sub	sp, #36	; 0x24
 8000f90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f92:	240c      	movs	r4, #12
 8000f94:	193b      	adds	r3, r7, r4
 8000f96:	0018      	movs	r0, r3
 8000f98:	2314      	movs	r3, #20
 8000f9a:	001a      	movs	r2, r3
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	f002 fd73 	bl	8003a88 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	4b36      	ldr	r3, [pc, #216]	; (800107c <MX_GPIO_Init+0xf0>)
 8000fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fa6:	4b35      	ldr	r3, [pc, #212]	; (800107c <MX_GPIO_Init+0xf0>)
 8000fa8:	2104      	movs	r1, #4
 8000faa:	430a      	orrs	r2, r1
 8000fac:	635a      	str	r2, [r3, #52]	; 0x34
 8000fae:	4b33      	ldr	r3, [pc, #204]	; (800107c <MX_GPIO_Init+0xf0>)
 8000fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	4b30      	ldr	r3, [pc, #192]	; (800107c <MX_GPIO_Init+0xf0>)
 8000fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fbe:	4b2f      	ldr	r3, [pc, #188]	; (800107c <MX_GPIO_Init+0xf0>)
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	635a      	str	r2, [r3, #52]	; 0x34
 8000fc6:	4b2d      	ldr	r3, [pc, #180]	; (800107c <MX_GPIO_Init+0xf0>)
 8000fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4013      	ands	r3, r2
 8000fce:	607b      	str	r3, [r7, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	4b2a      	ldr	r3, [pc, #168]	; (800107c <MX_GPIO_Init+0xf0>)
 8000fd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fd6:	4b29      	ldr	r3, [pc, #164]	; (800107c <MX_GPIO_Init+0xf0>)
 8000fd8:	2102      	movs	r1, #2
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	635a      	str	r2, [r3, #52]	; 0x34
 8000fde:	4b27      	ldr	r3, [pc, #156]	; (800107c <MX_GPIO_Init+0xf0>)
 8000fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000fea:	23c0      	movs	r3, #192	; 0xc0
 8000fec:	021b      	lsls	r3, r3, #8
 8000fee:	4824      	ldr	r0, [pc, #144]	; (8001080 <MX_GPIO_Init+0xf4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	0019      	movs	r1, r3
 8000ff4:	f000 fc26 	bl	8001844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000ff8:	23a0      	movs	r3, #160	; 0xa0
 8000ffa:	05db      	lsls	r3, r3, #23
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2138      	movs	r1, #56	; 0x38
 8001000:	0018      	movs	r0, r3
 8001002:	f000 fc1f 	bl	8001844 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001006:	193b      	adds	r3, r7, r4
 8001008:	22c0      	movs	r2, #192	; 0xc0
 800100a:	0212      	lsls	r2, r2, #8
 800100c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100e:	193b      	adds	r3, r7, r4
 8001010:	2201      	movs	r2, #1
 8001012:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	193b      	adds	r3, r7, r4
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101a:	193b      	adds	r3, r7, r4
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001020:	193b      	adds	r3, r7, r4
 8001022:	4a17      	ldr	r2, [pc, #92]	; (8001080 <MX_GPIO_Init+0xf4>)
 8001024:	0019      	movs	r1, r3
 8001026:	0010      	movs	r0, r2
 8001028:	f000 faa8 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800102c:	193b      	adds	r3, r7, r4
 800102e:	2207      	movs	r2, #7
 8001030:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001032:	193b      	adds	r3, r7, r4
 8001034:	2200      	movs	r2, #0
 8001036:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	193b      	adds	r3, r7, r4
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	193a      	adds	r2, r7, r4
 8001040:	23a0      	movs	r3, #160	; 0xa0
 8001042:	05db      	lsls	r3, r3, #23
 8001044:	0011      	movs	r1, r2
 8001046:	0018      	movs	r0, r3
 8001048:	f000 fa98 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800104c:	0021      	movs	r1, r4
 800104e:	187b      	adds	r3, r7, r1
 8001050:	2238      	movs	r2, #56	; 0x38
 8001052:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001054:	187b      	adds	r3, r7, r1
 8001056:	2201      	movs	r2, #1
 8001058:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	187b      	adds	r3, r7, r1
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	187b      	adds	r3, r7, r1
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	187a      	adds	r2, r7, r1
 8001068:	23a0      	movs	r3, #160	; 0xa0
 800106a:	05db      	lsls	r3, r3, #23
 800106c:	0011      	movs	r1, r2
 800106e:	0018      	movs	r0, r3
 8001070:	f000 fa84 	bl	800157c <HAL_GPIO_Init>

}
 8001074:	46c0      	nop			; (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	b009      	add	sp, #36	; 0x24
 800107a:	bd90      	pop	{r4, r7, pc}
 800107c:	40021000 	.word	0x40021000
 8001080:	50000800 	.word	0x50000800

08001084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001088:	b672      	cpsid	i
}
 800108a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800108c:	e7fe      	b.n	800108c <Error_Handler+0x8>
	...

08001090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <HAL_MspInit+0x44>)
 8001098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <HAL_MspInit+0x44>)
 800109c:	2101      	movs	r1, #1
 800109e:	430a      	orrs	r2, r1
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <HAL_MspInit+0x44>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	2201      	movs	r2, #1
 80010a8:	4013      	ands	r3, r2
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	4b09      	ldr	r3, [pc, #36]	; (80010d4 <HAL_MspInit+0x44>)
 80010b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010b2:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <HAL_MspInit+0x44>)
 80010b4:	2180      	movs	r1, #128	; 0x80
 80010b6:	0549      	lsls	r1, r1, #21
 80010b8:	430a      	orrs	r2, r1
 80010ba:	63da      	str	r2, [r3, #60]	; 0x3c
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <HAL_MspInit+0x44>)
 80010be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	055b      	lsls	r3, r3, #21
 80010c4:	4013      	ands	r3, r2
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b002      	add	sp, #8
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	40021000 	.word	0x40021000

080010d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010d8:	b590      	push	{r4, r7, lr}
 80010da:	b08b      	sub	sp, #44	; 0x2c
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	2414      	movs	r4, #20
 80010e2:	193b      	adds	r3, r7, r4
 80010e4:	0018      	movs	r0, r3
 80010e6:	2314      	movs	r3, #20
 80010e8:	001a      	movs	r2, r3
 80010ea:	2100      	movs	r1, #0
 80010ec:	f002 fccc 	bl	8003a88 <memset>
  if(hi2c->Instance==I2C2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a1c      	ldr	r2, [pc, #112]	; (8001168 <HAL_I2C_MspInit+0x90>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d131      	bne.n	800115e <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <HAL_I2C_MspInit+0x94>)
 80010fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010fe:	4b1b      	ldr	r3, [pc, #108]	; (800116c <HAL_I2C_MspInit+0x94>)
 8001100:	2101      	movs	r1, #1
 8001102:	430a      	orrs	r2, r1
 8001104:	635a      	str	r2, [r3, #52]	; 0x34
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_I2C_MspInit+0x94>)
 8001108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800110a:	2201      	movs	r2, #1
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PA11 [PA9]     ------> I2C2_SCL
    PA12 [PA10]     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001112:	193b      	adds	r3, r7, r4
 8001114:	22c0      	movs	r2, #192	; 0xc0
 8001116:	0152      	lsls	r2, r2, #5
 8001118:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111a:	0021      	movs	r1, r4
 800111c:	187b      	adds	r3, r7, r1
 800111e:	2212      	movs	r2, #18
 8001120:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001122:	187b      	adds	r3, r7, r1
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001128:	187b      	adds	r3, r7, r1
 800112a:	2200      	movs	r2, #0
 800112c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800112e:	187b      	adds	r3, r7, r1
 8001130:	2206      	movs	r2, #6
 8001132:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001134:	187a      	adds	r2, r7, r1
 8001136:	23a0      	movs	r3, #160	; 0xa0
 8001138:	05db      	lsls	r3, r3, #23
 800113a:	0011      	movs	r1, r2
 800113c:	0018      	movs	r0, r3
 800113e:	f000 fa1d 	bl	800157c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_I2C_MspInit+0x94>)
 8001144:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <HAL_I2C_MspInit+0x94>)
 8001148:	2180      	movs	r1, #128	; 0x80
 800114a:	03c9      	lsls	r1, r1, #15
 800114c:	430a      	orrs	r2, r1
 800114e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_I2C_MspInit+0x94>)
 8001152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	03db      	lsls	r3, r3, #15
 8001158:	4013      	ands	r3, r2
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	b00b      	add	sp, #44	; 0x2c
 8001164:	bd90      	pop	{r4, r7, pc}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	40005800 	.word	0x40005800
 800116c:	40021000 	.word	0x40021000

08001170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b097      	sub	sp, #92	; 0x5c
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	2344      	movs	r3, #68	; 0x44
 800117a:	18fb      	adds	r3, r7, r3
 800117c:	0018      	movs	r0, r3
 800117e:	2314      	movs	r3, #20
 8001180:	001a      	movs	r2, r3
 8001182:	2100      	movs	r1, #0
 8001184:	f002 fc80 	bl	8003a88 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001188:	2414      	movs	r4, #20
 800118a:	193b      	adds	r3, r7, r4
 800118c:	0018      	movs	r0, r3
 800118e:	2330      	movs	r3, #48	; 0x30
 8001190:	001a      	movs	r2, r3
 8001192:	2100      	movs	r1, #0
 8001194:	f002 fc78 	bl	8003a88 <memset>
  if(huart->Instance==USART1)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a22      	ldr	r2, [pc, #136]	; (8001228 <HAL_UART_MspInit+0xb8>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d13d      	bne.n	800121e <HAL_UART_MspInit+0xae>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011a2:	193b      	adds	r3, r7, r4
 80011a4:	2201      	movs	r2, #1
 80011a6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80011a8:	193b      	adds	r3, r7, r4
 80011aa:	2200      	movs	r2, #0
 80011ac:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011ae:	193b      	adds	r3, r7, r4
 80011b0:	0018      	movs	r0, r3
 80011b2:	f001 fcc7 	bl	8002b44 <HAL_RCCEx_PeriphCLKConfig>
 80011b6:	1e03      	subs	r3, r0, #0
 80011b8:	d001      	beq.n	80011be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80011ba:	f7ff ff63 	bl	8001084 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_UART_MspInit+0xbc>)
 80011c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <HAL_UART_MspInit+0xbc>)
 80011c4:	2180      	movs	r1, #128	; 0x80
 80011c6:	01c9      	lsls	r1, r1, #7
 80011c8:	430a      	orrs	r2, r1
 80011ca:	641a      	str	r2, [r3, #64]	; 0x40
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <HAL_UART_MspInit+0xbc>)
 80011ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	01db      	lsls	r3, r3, #7
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_UART_MspInit+0xbc>)
 80011dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <HAL_UART_MspInit+0xbc>)
 80011e0:	2102      	movs	r1, #2
 80011e2:	430a      	orrs	r2, r1
 80011e4:	635a      	str	r2, [r3, #52]	; 0x34
 80011e6:	4b11      	ldr	r3, [pc, #68]	; (800122c <HAL_UART_MspInit+0xbc>)
 80011e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011ea:	2202      	movs	r2, #2
 80011ec:	4013      	ands	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011f2:	2144      	movs	r1, #68	; 0x44
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	22c0      	movs	r2, #192	; 0xc0
 80011f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	187b      	adds	r3, r7, r1
 80011fc:	2202      	movs	r2, #2
 80011fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	187b      	adds	r3, r7, r1
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	187b      	adds	r3, r7, r1
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800120c:	187b      	adds	r3, r7, r1
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001212:	187b      	adds	r3, r7, r1
 8001214:	4a06      	ldr	r2, [pc, #24]	; (8001230 <HAL_UART_MspInit+0xc0>)
 8001216:	0019      	movs	r1, r3
 8001218:	0010      	movs	r0, r2
 800121a:	f000 f9af 	bl	800157c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	b017      	add	sp, #92	; 0x5c
 8001224:	bd90      	pop	{r4, r7, pc}
 8001226:	46c0      	nop			; (mov r8, r8)
 8001228:	40013800 	.word	0x40013800
 800122c:	40021000 	.word	0x40021000
 8001230:	50000400 	.word	0x50000400

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <NMI_Handler+0x4>

0800123a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <HardFault_Handler+0x4>

08001240 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001258:	f000 f89c 	bl	8001394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}

08001262 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800126e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001270:	f7ff fff7 	bl	8001262 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001276:	490d      	ldr	r1, [pc, #52]	; (80012ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001278:	4a0d      	ldr	r2, [pc, #52]	; (80012b0 <LoopForever+0xe>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800127c:	e002      	b.n	8001284 <LoopCopyDataInit>

0800127e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001282:	3304      	adds	r3, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001288:	d3f9      	bcc.n	800127e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800128c:	4c0a      	ldr	r4, [pc, #40]	; (80012b8 <LoopForever+0x16>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001290:	e001      	b.n	8001296 <LoopFillZerobss>

08001292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001294:	3204      	adds	r2, #4

08001296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800129a:	f002 fbd1 	bl	8003a40 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800129e:	f7ff fd25 	bl	8000cec <main>

080012a2 <LoopForever>:

LoopForever:
  b LoopForever
 80012a2:	e7fe      	b.n	80012a2 <LoopForever>
  ldr   r0, =_estack
 80012a4:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 80012a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ac:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80012b0:	080048a4 	.word	0x080048a4
  ldr r2, =_sbss
 80012b4:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80012b8:	20000518 	.word	0x20000518

080012bc <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC1_COMP_IRQHandler>
	...

080012c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	2200      	movs	r2, #0
 80012ca:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <HAL_Init+0x3c>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_Init+0x3c>)
 80012d2:	2180      	movs	r1, #128	; 0x80
 80012d4:	0049      	lsls	r1, r1, #1
 80012d6:	430a      	orrs	r2, r1
 80012d8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012da:	2003      	movs	r0, #3
 80012dc:	f000 f810 	bl	8001300 <HAL_InitTick>
 80012e0:	1e03      	subs	r3, r0, #0
 80012e2:	d003      	beq.n	80012ec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80012e4:	1dfb      	adds	r3, r7, #7
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
 80012ea:	e001      	b.n	80012f0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80012ec:	f7ff fed0 	bl	8001090 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012f0:	1dfb      	adds	r3, r7, #7
 80012f2:	781b      	ldrb	r3, [r3, #0]
}
 80012f4:	0018      	movs	r0, r3
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b002      	add	sp, #8
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40022000 	.word	0x40022000

08001300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001308:	230f      	movs	r3, #15
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	2200      	movs	r2, #0
 800130e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001310:	4b1d      	ldr	r3, [pc, #116]	; (8001388 <HAL_InitTick+0x88>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d02b      	beq.n	8001370 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001318:	4b1c      	ldr	r3, [pc, #112]	; (800138c <HAL_InitTick+0x8c>)
 800131a:	681c      	ldr	r4, [r3, #0]
 800131c:	4b1a      	ldr	r3, [pc, #104]	; (8001388 <HAL_InitTick+0x88>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	0019      	movs	r1, r3
 8001322:	23fa      	movs	r3, #250	; 0xfa
 8001324:	0098      	lsls	r0, r3, #2
 8001326:	f7fe feef 	bl	8000108 <__udivsi3>
 800132a:	0003      	movs	r3, r0
 800132c:	0019      	movs	r1, r3
 800132e:	0020      	movs	r0, r4
 8001330:	f7fe feea 	bl	8000108 <__udivsi3>
 8001334:	0003      	movs	r3, r0
 8001336:	0018      	movs	r0, r3
 8001338:	f000 f913 	bl	8001562 <HAL_SYSTICK_Config>
 800133c:	1e03      	subs	r3, r0, #0
 800133e:	d112      	bne.n	8001366 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b03      	cmp	r3, #3
 8001344:	d80a      	bhi.n	800135c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	2301      	movs	r3, #1
 800134a:	425b      	negs	r3, r3
 800134c:	2200      	movs	r2, #0
 800134e:	0018      	movs	r0, r3
 8001350:	f000 f8f2 	bl	8001538 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001354:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <HAL_InitTick+0x90>)
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	e00d      	b.n	8001378 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800135c:	230f      	movs	r3, #15
 800135e:	18fb      	adds	r3, r7, r3
 8001360:	2201      	movs	r2, #1
 8001362:	701a      	strb	r2, [r3, #0]
 8001364:	e008      	b.n	8001378 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001366:	230f      	movs	r3, #15
 8001368:	18fb      	adds	r3, r7, r3
 800136a:	2201      	movs	r2, #1
 800136c:	701a      	strb	r2, [r3, #0]
 800136e:	e003      	b.n	8001378 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001370:	230f      	movs	r3, #15
 8001372:	18fb      	adds	r3, r7, r3
 8001374:	2201      	movs	r2, #1
 8001376:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001378:	230f      	movs	r3, #15
 800137a:	18fb      	adds	r3, r7, r3
 800137c:	781b      	ldrb	r3, [r3, #0]
}
 800137e:	0018      	movs	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	b005      	add	sp, #20
 8001384:	bd90      	pop	{r4, r7, pc}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	20000010 	.word	0x20000010
 800138c:	20000008 	.word	0x20000008
 8001390:	2000000c 	.word	0x2000000c

08001394 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_IncTick+0x1c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	001a      	movs	r2, r3
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_IncTick+0x20>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	18d2      	adds	r2, r2, r3
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <HAL_IncTick+0x20>)
 80013a6:	601a      	str	r2, [r3, #0]
}
 80013a8:	46c0      	nop			; (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	20000010 	.word	0x20000010
 80013b4:	20000514 	.word	0x20000514

080013b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  return uwTick;
 80013bc:	4b02      	ldr	r3, [pc, #8]	; (80013c8 <HAL_GetTick+0x10>)
 80013be:	681b      	ldr	r3, [r3, #0]
}
 80013c0:	0018      	movs	r0, r3
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	20000514 	.word	0x20000514

080013cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d4:	f7ff fff0 	bl	80013b8 <HAL_GetTick>
 80013d8:	0003      	movs	r3, r0
 80013da:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	3301      	adds	r3, #1
 80013e4:	d005      	beq.n	80013f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013e6:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <HAL_Delay+0x44>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	001a      	movs	r2, r3
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	189b      	adds	r3, r3, r2
 80013f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	f7ff ffe0 	bl	80013b8 <HAL_GetTick>
 80013f8:	0002      	movs	r2, r0
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	68fa      	ldr	r2, [r7, #12]
 8001400:	429a      	cmp	r2, r3
 8001402:	d8f7      	bhi.n	80013f4 <HAL_Delay+0x28>
  {
  }
}
 8001404:	46c0      	nop			; (mov r8, r8)
 8001406:	46c0      	nop			; (mov r8, r8)
 8001408:	46bd      	mov	sp, r7
 800140a:	b004      	add	sp, #16
 800140c:	bd80      	pop	{r7, pc}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	20000010 	.word	0x20000010

08001414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	0002      	movs	r2, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001422:	1dfb      	adds	r3, r7, #7
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b7f      	cmp	r3, #127	; 0x7f
 8001428:	d828      	bhi.n	800147c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800142a:	4a2f      	ldr	r2, [pc, #188]	; (80014e8 <__NVIC_SetPriority+0xd4>)
 800142c:	1dfb      	adds	r3, r7, #7
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b25b      	sxtb	r3, r3
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	33c0      	adds	r3, #192	; 0xc0
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	589b      	ldr	r3, [r3, r2]
 800143a:	1dfa      	adds	r2, r7, #7
 800143c:	7812      	ldrb	r2, [r2, #0]
 800143e:	0011      	movs	r1, r2
 8001440:	2203      	movs	r2, #3
 8001442:	400a      	ands	r2, r1
 8001444:	00d2      	lsls	r2, r2, #3
 8001446:	21ff      	movs	r1, #255	; 0xff
 8001448:	4091      	lsls	r1, r2
 800144a:	000a      	movs	r2, r1
 800144c:	43d2      	mvns	r2, r2
 800144e:	401a      	ands	r2, r3
 8001450:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	019b      	lsls	r3, r3, #6
 8001456:	22ff      	movs	r2, #255	; 0xff
 8001458:	401a      	ands	r2, r3
 800145a:	1dfb      	adds	r3, r7, #7
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	0018      	movs	r0, r3
 8001460:	2303      	movs	r3, #3
 8001462:	4003      	ands	r3, r0
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001468:	481f      	ldr	r0, [pc, #124]	; (80014e8 <__NVIC_SetPriority+0xd4>)
 800146a:	1dfb      	adds	r3, r7, #7
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	b25b      	sxtb	r3, r3
 8001470:	089b      	lsrs	r3, r3, #2
 8001472:	430a      	orrs	r2, r1
 8001474:	33c0      	adds	r3, #192	; 0xc0
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800147a:	e031      	b.n	80014e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800147c:	4a1b      	ldr	r2, [pc, #108]	; (80014ec <__NVIC_SetPriority+0xd8>)
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	0019      	movs	r1, r3
 8001484:	230f      	movs	r3, #15
 8001486:	400b      	ands	r3, r1
 8001488:	3b08      	subs	r3, #8
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	3306      	adds	r3, #6
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	18d3      	adds	r3, r2, r3
 8001492:	3304      	adds	r3, #4
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	1dfa      	adds	r2, r7, #7
 8001498:	7812      	ldrb	r2, [r2, #0]
 800149a:	0011      	movs	r1, r2
 800149c:	2203      	movs	r2, #3
 800149e:	400a      	ands	r2, r1
 80014a0:	00d2      	lsls	r2, r2, #3
 80014a2:	21ff      	movs	r1, #255	; 0xff
 80014a4:	4091      	lsls	r1, r2
 80014a6:	000a      	movs	r2, r1
 80014a8:	43d2      	mvns	r2, r2
 80014aa:	401a      	ands	r2, r3
 80014ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	019b      	lsls	r3, r3, #6
 80014b2:	22ff      	movs	r2, #255	; 0xff
 80014b4:	401a      	ands	r2, r3
 80014b6:	1dfb      	adds	r3, r7, #7
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	0018      	movs	r0, r3
 80014bc:	2303      	movs	r3, #3
 80014be:	4003      	ands	r3, r0
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014c4:	4809      	ldr	r0, [pc, #36]	; (80014ec <__NVIC_SetPriority+0xd8>)
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	001c      	movs	r4, r3
 80014cc:	230f      	movs	r3, #15
 80014ce:	4023      	ands	r3, r4
 80014d0:	3b08      	subs	r3, #8
 80014d2:	089b      	lsrs	r3, r3, #2
 80014d4:	430a      	orrs	r2, r1
 80014d6:	3306      	adds	r3, #6
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	18c3      	adds	r3, r0, r3
 80014dc:	3304      	adds	r3, #4
 80014de:	601a      	str	r2, [r3, #0]
}
 80014e0:	46c0      	nop			; (mov r8, r8)
 80014e2:	46bd      	mov	sp, r7
 80014e4:	b003      	add	sp, #12
 80014e6:	bd90      	pop	{r4, r7, pc}
 80014e8:	e000e100 	.word	0xe000e100
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	1e5a      	subs	r2, r3, #1
 80014fc:	2380      	movs	r3, #128	; 0x80
 80014fe:	045b      	lsls	r3, r3, #17
 8001500:	429a      	cmp	r2, r3
 8001502:	d301      	bcc.n	8001508 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001504:	2301      	movs	r3, #1
 8001506:	e010      	b.n	800152a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <SysTick_Config+0x44>)
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	3a01      	subs	r2, #1
 800150e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001510:	2301      	movs	r3, #1
 8001512:	425b      	negs	r3, r3
 8001514:	2103      	movs	r1, #3
 8001516:	0018      	movs	r0, r3
 8001518:	f7ff ff7c 	bl	8001414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800151c:	4b05      	ldr	r3, [pc, #20]	; (8001534 <SysTick_Config+0x44>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <SysTick_Config+0x44>)
 8001524:	2207      	movs	r2, #7
 8001526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001528:	2300      	movs	r3, #0
}
 800152a:	0018      	movs	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	b002      	add	sp, #8
 8001530:	bd80      	pop	{r7, pc}
 8001532:	46c0      	nop			; (mov r8, r8)
 8001534:	e000e010 	.word	0xe000e010

08001538 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af00      	add	r7, sp, #0
 800153e:	60b9      	str	r1, [r7, #8]
 8001540:	607a      	str	r2, [r7, #4]
 8001542:	210f      	movs	r1, #15
 8001544:	187b      	adds	r3, r7, r1
 8001546:	1c02      	adds	r2, r0, #0
 8001548:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800154a:	68ba      	ldr	r2, [r7, #8]
 800154c:	187b      	adds	r3, r7, r1
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	b25b      	sxtb	r3, r3
 8001552:	0011      	movs	r1, r2
 8001554:	0018      	movs	r0, r3
 8001556:	f7ff ff5d 	bl	8001414 <__NVIC_SetPriority>
}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	46bd      	mov	sp, r7
 800155e:	b004      	add	sp, #16
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	0018      	movs	r0, r3
 800156e:	f7ff ffbf 	bl	80014f0 <SysTick_Config>
 8001572:	0003      	movs	r3, r0
}
 8001574:	0018      	movs	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	b002      	add	sp, #8
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158a:	e147      	b.n	800181c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2101      	movs	r1, #1
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4091      	lsls	r1, r2
 8001596:	000a      	movs	r2, r1
 8001598:	4013      	ands	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d100      	bne.n	80015a4 <HAL_GPIO_Init+0x28>
 80015a2:	e138      	b.n	8001816 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2203      	movs	r2, #3
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d005      	beq.n	80015bc <HAL_GPIO_Init+0x40>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2203      	movs	r2, #3
 80015b6:	4013      	ands	r3, r2
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d130      	bne.n	800161e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	2203      	movs	r2, #3
 80015c8:	409a      	lsls	r2, r3
 80015ca:	0013      	movs	r3, r2
 80015cc:	43da      	mvns	r2, r3
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	409a      	lsls	r2, r3
 80015de:	0013      	movs	r3, r2
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015f2:	2201      	movs	r2, #1
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	409a      	lsls	r2, r3
 80015f8:	0013      	movs	r3, r2
 80015fa:	43da      	mvns	r2, r3
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	091b      	lsrs	r3, r3, #4
 8001608:	2201      	movs	r2, #1
 800160a:	401a      	ands	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	409a      	lsls	r2, r3
 8001610:	0013      	movs	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2203      	movs	r2, #3
 8001624:	4013      	ands	r3, r2
 8001626:	2b03      	cmp	r3, #3
 8001628:	d017      	beq.n	800165a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	2203      	movs	r2, #3
 8001636:	409a      	lsls	r2, r3
 8001638:	0013      	movs	r3, r2
 800163a:	43da      	mvns	r2, r3
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	409a      	lsls	r2, r3
 800164c:	0013      	movs	r3, r2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2203      	movs	r2, #3
 8001660:	4013      	ands	r3, r2
 8001662:	2b02      	cmp	r3, #2
 8001664:	d123      	bne.n	80016ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	08da      	lsrs	r2, r3, #3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3208      	adds	r2, #8
 800166e:	0092      	lsls	r2, r2, #2
 8001670:	58d3      	ldr	r3, [r2, r3]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2207      	movs	r2, #7
 8001678:	4013      	ands	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	220f      	movs	r2, #15
 800167e:	409a      	lsls	r2, r3
 8001680:	0013      	movs	r3, r2
 8001682:	43da      	mvns	r2, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	691a      	ldr	r2, [r3, #16]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2107      	movs	r1, #7
 8001692:	400b      	ands	r3, r1
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	409a      	lsls	r2, r3
 8001698:	0013      	movs	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	08da      	lsrs	r2, r3, #3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3208      	adds	r2, #8
 80016a8:	0092      	lsls	r2, r2, #2
 80016aa:	6939      	ldr	r1, [r7, #16]
 80016ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2203      	movs	r2, #3
 80016ba:	409a      	lsls	r2, r3
 80016bc:	0013      	movs	r3, r2
 80016be:	43da      	mvns	r2, r3
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2203      	movs	r2, #3
 80016cc:	401a      	ands	r2, r3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	409a      	lsls	r2, r3
 80016d4:	0013      	movs	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	23c0      	movs	r3, #192	; 0xc0
 80016e8:	029b      	lsls	r3, r3, #10
 80016ea:	4013      	ands	r3, r2
 80016ec:	d100      	bne.n	80016f0 <HAL_GPIO_Init+0x174>
 80016ee:	e092      	b.n	8001816 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80016f0:	4a50      	ldr	r2, [pc, #320]	; (8001834 <HAL_GPIO_Init+0x2b8>)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	089b      	lsrs	r3, r3, #2
 80016f6:	3318      	adds	r3, #24
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	589b      	ldr	r3, [r3, r2]
 80016fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	2203      	movs	r2, #3
 8001702:	4013      	ands	r3, r2
 8001704:	00db      	lsls	r3, r3, #3
 8001706:	220f      	movs	r2, #15
 8001708:	409a      	lsls	r2, r3
 800170a:	0013      	movs	r3, r2
 800170c:	43da      	mvns	r2, r3
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	23a0      	movs	r3, #160	; 0xa0
 8001718:	05db      	lsls	r3, r3, #23
 800171a:	429a      	cmp	r2, r3
 800171c:	d013      	beq.n	8001746 <HAL_GPIO_Init+0x1ca>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a45      	ldr	r2, [pc, #276]	; (8001838 <HAL_GPIO_Init+0x2bc>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d00d      	beq.n	8001742 <HAL_GPIO_Init+0x1c6>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a44      	ldr	r2, [pc, #272]	; (800183c <HAL_GPIO_Init+0x2c0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d007      	beq.n	800173e <HAL_GPIO_Init+0x1c2>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a43      	ldr	r2, [pc, #268]	; (8001840 <HAL_GPIO_Init+0x2c4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d101      	bne.n	800173a <HAL_GPIO_Init+0x1be>
 8001736:	2303      	movs	r3, #3
 8001738:	e006      	b.n	8001748 <HAL_GPIO_Init+0x1cc>
 800173a:	2305      	movs	r3, #5
 800173c:	e004      	b.n	8001748 <HAL_GPIO_Init+0x1cc>
 800173e:	2302      	movs	r3, #2
 8001740:	e002      	b.n	8001748 <HAL_GPIO_Init+0x1cc>
 8001742:	2301      	movs	r3, #1
 8001744:	e000      	b.n	8001748 <HAL_GPIO_Init+0x1cc>
 8001746:	2300      	movs	r3, #0
 8001748:	697a      	ldr	r2, [r7, #20]
 800174a:	2103      	movs	r1, #3
 800174c:	400a      	ands	r2, r1
 800174e:	00d2      	lsls	r2, r2, #3
 8001750:	4093      	lsls	r3, r2
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001758:	4936      	ldr	r1, [pc, #216]	; (8001834 <HAL_GPIO_Init+0x2b8>)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	089b      	lsrs	r3, r3, #2
 800175e:	3318      	adds	r3, #24
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001766:	4a33      	ldr	r2, [pc, #204]	; (8001834 <HAL_GPIO_Init+0x2b8>)
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	58d3      	ldr	r3, [r2, r3]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	43da      	mvns	r2, r3
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	025b      	lsls	r3, r3, #9
 8001780:	4013      	ands	r3, r2
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800178c:	4929      	ldr	r1, [pc, #164]	; (8001834 <HAL_GPIO_Init+0x2b8>)
 800178e:	2280      	movs	r2, #128	; 0x80
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001794:	4a27      	ldr	r2, [pc, #156]	; (8001834 <HAL_GPIO_Init+0x2b8>)
 8001796:	2384      	movs	r3, #132	; 0x84
 8001798:	58d3      	ldr	r3, [r2, r3]
 800179a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	43da      	mvns	r2, r3
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	4013      	ands	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	029b      	lsls	r3, r3, #10
 80017ae:	4013      	ands	r3, r2
 80017b0:	d003      	beq.n	80017ba <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017ba:	491e      	ldr	r1, [pc, #120]	; (8001834 <HAL_GPIO_Init+0x2b8>)
 80017bc:	2284      	movs	r2, #132	; 0x84
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017c2:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <HAL_GPIO_Init+0x2b8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	43da      	mvns	r2, r3
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	035b      	lsls	r3, r3, #13
 80017da:	4013      	ands	r3, r2
 80017dc:	d003      	beq.n	80017e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <HAL_GPIO_Init+0x2b8>)
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <HAL_GPIO_Init+0x2b8>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	43da      	mvns	r2, r3
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	4013      	ands	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685a      	ldr	r2, [r3, #4]
 8001800:	2380      	movs	r3, #128	; 0x80
 8001802:	039b      	lsls	r3, r3, #14
 8001804:	4013      	ands	r3, r2
 8001806:	d003      	beq.n	8001810 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001810:	4b08      	ldr	r3, [pc, #32]	; (8001834 <HAL_GPIO_Init+0x2b8>)
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3301      	adds	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	40da      	lsrs	r2, r3
 8001824:	1e13      	subs	r3, r2, #0
 8001826:	d000      	beq.n	800182a <HAL_GPIO_Init+0x2ae>
 8001828:	e6b0      	b.n	800158c <HAL_GPIO_Init+0x10>
  }
}
 800182a:	46c0      	nop			; (mov r8, r8)
 800182c:	46c0      	nop			; (mov r8, r8)
 800182e:	46bd      	mov	sp, r7
 8001830:	b006      	add	sp, #24
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40021800 	.word	0x40021800
 8001838:	50000400 	.word	0x50000400
 800183c:	50000800 	.word	0x50000800
 8001840:	50000c00 	.word	0x50000c00

08001844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	0008      	movs	r0, r1
 800184e:	0011      	movs	r1, r2
 8001850:	1cbb      	adds	r3, r7, #2
 8001852:	1c02      	adds	r2, r0, #0
 8001854:	801a      	strh	r2, [r3, #0]
 8001856:	1c7b      	adds	r3, r7, #1
 8001858:	1c0a      	adds	r2, r1, #0
 800185a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800185c:	1c7b      	adds	r3, r7, #1
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d004      	beq.n	800186e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001864:	1cbb      	adds	r3, r7, #2
 8001866:	881a      	ldrh	r2, [r3, #0]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800186c:	e003      	b.n	8001876 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800186e:	1cbb      	adds	r3, r7, #2
 8001870:	881a      	ldrh	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	46bd      	mov	sp, r7
 800187a:	b002      	add	sp, #8
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d101      	bne.n	8001892 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e082      	b.n	8001998 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2241      	movs	r2, #65	; 0x41
 8001896:	5c9b      	ldrb	r3, [r3, r2]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d107      	bne.n	80018ae <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2240      	movs	r2, #64	; 0x40
 80018a2:	2100      	movs	r1, #0
 80018a4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	0018      	movs	r0, r3
 80018aa:	f7ff fc15 	bl	80010d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2241      	movs	r2, #65	; 0x41
 80018b2:	2124      	movs	r1, #36	; 0x24
 80018b4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2101      	movs	r1, #1
 80018c2:	438a      	bics	r2, r1
 80018c4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4934      	ldr	r1, [pc, #208]	; (80019a0 <HAL_I2C_Init+0x120>)
 80018d0:	400a      	ands	r2, r1
 80018d2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	689a      	ldr	r2, [r3, #8]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4931      	ldr	r1, [pc, #196]	; (80019a4 <HAL_I2C_Init+0x124>)
 80018e0:	400a      	ands	r2, r1
 80018e2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d108      	bne.n	80018fe <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2180      	movs	r1, #128	; 0x80
 80018f6:	0209      	lsls	r1, r1, #8
 80018f8:	430a      	orrs	r2, r1
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	e007      	b.n	800190e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2184      	movs	r1, #132	; 0x84
 8001908:	0209      	lsls	r1, r1, #8
 800190a:	430a      	orrs	r2, r1
 800190c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b02      	cmp	r3, #2
 8001914:	d104      	bne.n	8001920 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2280      	movs	r2, #128	; 0x80
 800191c:	0112      	lsls	r2, r2, #4
 800191e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	491f      	ldr	r1, [pc, #124]	; (80019a8 <HAL_I2C_Init+0x128>)
 800192c:	430a      	orrs	r2, r1
 800192e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	491a      	ldr	r1, [pc, #104]	; (80019a4 <HAL_I2C_Init+0x124>)
 800193c:	400a      	ands	r2, r1
 800193e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	691a      	ldr	r2, [r3, #16]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	431a      	orrs	r2, r3
 800194a:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	430a      	orrs	r2, r1
 8001958:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	69d9      	ldr	r1, [r3, #28]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a1a      	ldr	r2, [r3, #32]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2101      	movs	r1, #1
 8001976:	430a      	orrs	r2, r1
 8001978:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2241      	movs	r2, #65	; 0x41
 8001984:	2120      	movs	r1, #32
 8001986:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2242      	movs	r2, #66	; 0x42
 8001992:	2100      	movs	r1, #0
 8001994:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	0018      	movs	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	b002      	add	sp, #8
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	f0ffffff 	.word	0xf0ffffff
 80019a4:	ffff7fff 	.word	0xffff7fff
 80019a8:	02008000 	.word	0x02008000

080019ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019ac:	b590      	push	{r4, r7, lr}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	000c      	movs	r4, r1
 80019b6:	0010      	movs	r0, r2
 80019b8:	0019      	movs	r1, r3
 80019ba:	230a      	movs	r3, #10
 80019bc:	18fb      	adds	r3, r7, r3
 80019be:	1c22      	adds	r2, r4, #0
 80019c0:	801a      	strh	r2, [r3, #0]
 80019c2:	2308      	movs	r3, #8
 80019c4:	18fb      	adds	r3, r7, r3
 80019c6:	1c02      	adds	r2, r0, #0
 80019c8:	801a      	strh	r2, [r3, #0]
 80019ca:	1dbb      	adds	r3, r7, #6
 80019cc:	1c0a      	adds	r2, r1, #0
 80019ce:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2241      	movs	r2, #65	; 0x41
 80019d4:	5c9b      	ldrb	r3, [r3, r2]
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b20      	cmp	r3, #32
 80019da:	d000      	beq.n	80019de <HAL_I2C_Mem_Write+0x32>
 80019dc:	e10c      	b.n	8001bf8 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80019de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d004      	beq.n	80019ee <HAL_I2C_Mem_Write+0x42>
 80019e4:	232c      	movs	r3, #44	; 0x2c
 80019e6:	18fb      	adds	r3, r7, r3
 80019e8:	881b      	ldrh	r3, [r3, #0]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d105      	bne.n	80019fa <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2280      	movs	r2, #128	; 0x80
 80019f2:	0092      	lsls	r2, r2, #2
 80019f4:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e0ff      	b.n	8001bfa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2240      	movs	r2, #64	; 0x40
 80019fe:	5c9b      	ldrb	r3, [r3, r2]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <HAL_I2C_Mem_Write+0x5c>
 8001a04:	2302      	movs	r3, #2
 8001a06:	e0f8      	b.n	8001bfa <HAL_I2C_Mem_Write+0x24e>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2240      	movs	r2, #64	; 0x40
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a10:	f7ff fcd2 	bl	80013b8 <HAL_GetTick>
 8001a14:	0003      	movs	r3, r0
 8001a16:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	0219      	lsls	r1, r3, #8
 8001a1c:	68f8      	ldr	r0, [r7, #12]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	2319      	movs	r3, #25
 8001a24:	2201      	movs	r2, #1
 8001a26:	f000 f975 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 8001a2a:	1e03      	subs	r3, r0, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e0e3      	b.n	8001bfa <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2241      	movs	r2, #65	; 0x41
 8001a36:	2121      	movs	r1, #33	; 0x21
 8001a38:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2242      	movs	r2, #66	; 0x42
 8001a3e:	2140      	movs	r1, #64	; 0x40
 8001a40:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	222c      	movs	r2, #44	; 0x2c
 8001a52:	18ba      	adds	r2, r7, r2
 8001a54:	8812      	ldrh	r2, [r2, #0]
 8001a56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a5e:	1dbb      	adds	r3, r7, #6
 8001a60:	881c      	ldrh	r4, [r3, #0]
 8001a62:	2308      	movs	r3, #8
 8001a64:	18fb      	adds	r3, r7, r3
 8001a66:	881a      	ldrh	r2, [r3, #0]
 8001a68:	230a      	movs	r3, #10
 8001a6a:	18fb      	adds	r3, r7, r3
 8001a6c:	8819      	ldrh	r1, [r3, #0]
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	0023      	movs	r3, r4
 8001a7a:	f000 f8c5 	bl	8001c08 <I2C_RequestMemoryWrite>
 8001a7e:	1e03      	subs	r3, r0, #0
 8001a80:	d005      	beq.n	8001a8e <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2240      	movs	r2, #64	; 0x40
 8001a86:	2100      	movs	r1, #0
 8001a88:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e0b5      	b.n	8001bfa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	2bff      	cmp	r3, #255	; 0xff
 8001a96:	d911      	bls.n	8001abc <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	22ff      	movs	r2, #255	; 0xff
 8001a9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	2380      	movs	r3, #128	; 0x80
 8001aa6:	045c      	lsls	r4, r3, #17
 8001aa8:	230a      	movs	r3, #10
 8001aaa:	18fb      	adds	r3, r7, r3
 8001aac:	8819      	ldrh	r1, [r3, #0]
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	0023      	movs	r3, r4
 8001ab6:	f000 fa61 	bl	8001f7c <I2C_TransferConfig>
 8001aba:	e012      	b.n	8001ae2 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	049c      	lsls	r4, r3, #18
 8001ad0:	230a      	movs	r3, #10
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	8819      	ldrh	r1, [r3, #0]
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	0023      	movs	r3, r4
 8001ade:	f000 fa4d 	bl	8001f7c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f000 f952 	bl	8001d92 <I2C_WaitOnTXISFlagUntilTimeout>
 8001aee:	1e03      	subs	r3, r0, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e081      	b.n	8001bfa <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	781a      	ldrb	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b06:	1c5a      	adds	r2, r3, #1
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d03a      	beq.n	8001ba6 <HAL_I2C_Mem_Write+0x1fa>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d136      	bne.n	8001ba6 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	9300      	str	r3, [sp, #0]
 8001b40:	0013      	movs	r3, r2
 8001b42:	2200      	movs	r2, #0
 8001b44:	2180      	movs	r1, #128	; 0x80
 8001b46:	f000 f8e5 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 8001b4a:	1e03      	subs	r3, r0, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e053      	b.n	8001bfa <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	2bff      	cmp	r3, #255	; 0xff
 8001b5a:	d911      	bls.n	8001b80 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	22ff      	movs	r2, #255	; 0xff
 8001b60:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	2380      	movs	r3, #128	; 0x80
 8001b6a:	045c      	lsls	r4, r3, #17
 8001b6c:	230a      	movs	r3, #10
 8001b6e:	18fb      	adds	r3, r7, r3
 8001b70:	8819      	ldrh	r1, [r3, #0]
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	2300      	movs	r3, #0
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	0023      	movs	r3, r4
 8001b7a:	f000 f9ff 	bl	8001f7c <I2C_TransferConfig>
 8001b7e:	e012      	b.n	8001ba6 <HAL_I2C_Mem_Write+0x1fa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	049c      	lsls	r4, r3, #18
 8001b94:	230a      	movs	r3, #10
 8001b96:	18fb      	adds	r3, r7, r3
 8001b98:	8819      	ldrh	r1, [r3, #0]
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	0023      	movs	r3, r4
 8001ba2:	f000 f9eb 	bl	8001f7c <I2C_TransferConfig>
                                I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d198      	bne.n	8001ae2 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f000 f92a 	bl	8001e10 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001bbc:	1e03      	subs	r3, r0, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e01a      	b.n	8001bfa <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2220      	movs	r2, #32
 8001bca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	490b      	ldr	r1, [pc, #44]	; (8001c04 <HAL_I2C_Mem_Write+0x258>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2241      	movs	r2, #65	; 0x41
 8001be0:	2120      	movs	r1, #32
 8001be2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2242      	movs	r2, #66	; 0x42
 8001be8:	2100      	movs	r1, #0
 8001bea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2240      	movs	r2, #64	; 0x40
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	e000      	b.n	8001bfa <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001bf8:	2302      	movs	r3, #2
  }
}
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	b007      	add	sp, #28
 8001c00:	bd90      	pop	{r4, r7, pc}
 8001c02:	46c0      	nop			; (mov r8, r8)
 8001c04:	fe00e800 	.word	0xfe00e800

08001c08 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                   uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                   uint32_t Tickstart)
{
 8001c08:	b5b0      	push	{r4, r5, r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af02      	add	r7, sp, #8
 8001c0e:	60f8      	str	r0, [r7, #12]
 8001c10:	000c      	movs	r4, r1
 8001c12:	0010      	movs	r0, r2
 8001c14:	0019      	movs	r1, r3
 8001c16:	250a      	movs	r5, #10
 8001c18:	197b      	adds	r3, r7, r5
 8001c1a:	1c22      	adds	r2, r4, #0
 8001c1c:	801a      	strh	r2, [r3, #0]
 8001c1e:	2308      	movs	r3, #8
 8001c20:	18fb      	adds	r3, r7, r3
 8001c22:	1c02      	adds	r2, r0, #0
 8001c24:	801a      	strh	r2, [r3, #0]
 8001c26:	1dbb      	adds	r3, r7, #6
 8001c28:	1c0a      	adds	r2, r1, #0
 8001c2a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001c2c:	1dbb      	adds	r3, r7, #6
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	b2da      	uxtb	r2, r3
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	045c      	lsls	r4, r3, #17
 8001c36:	197b      	adds	r3, r7, r5
 8001c38:	8819      	ldrh	r1, [r3, #0]
 8001c3a:	68f8      	ldr	r0, [r7, #12]
 8001c3c:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <I2C_RequestMemoryWrite+0xc4>)
 8001c3e:	9300      	str	r3, [sp, #0]
 8001c40:	0023      	movs	r3, r4
 8001c42:	f000 f99b 	bl	8001f7c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c48:	6a39      	ldr	r1, [r7, #32]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f000 f8a0 	bl	8001d92 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c52:	1e03      	subs	r3, r0, #0
 8001c54:	d001      	beq.n	8001c5a <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e033      	b.n	8001cc2 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c5a:	1dbb      	adds	r3, r7, #6
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d107      	bne.n	8001c72 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c62:	2308      	movs	r3, #8
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	629a      	str	r2, [r3, #40]	; 0x28
 8001c70:	e019      	b.n	8001ca6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001c72:	2308      	movs	r3, #8
 8001c74:	18fb      	adds	r3, r7, r3
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c86:	6a39      	ldr	r1, [r7, #32]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f000 f881 	bl	8001d92 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c90:	1e03      	subs	r3, r0, #0
 8001c92:	d001      	beq.n	8001c98 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e014      	b.n	8001cc2 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001c98:	2308      	movs	r3, #8
 8001c9a:	18fb      	adds	r3, r7, r3
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ca6:	6a3a      	ldr	r2, [r7, #32]
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	0013      	movs	r3, r2
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	2180      	movs	r1, #128	; 0x80
 8001cb4:	f000 f82e 	bl	8001d14 <I2C_WaitOnFlagUntilTimeout>
 8001cb8:	1e03      	subs	r3, r0, #0
 8001cba:	d001      	beq.n	8001cc0 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	0018      	movs	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	b004      	add	sp, #16
 8001cc8:	bdb0      	pop	{r4, r5, r7, pc}
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	80002000 	.word	0x80002000

08001cd0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d103      	bne.n	8001cee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2200      	movs	r2, #0
 8001cec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d007      	beq.n	8001d0c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699a      	ldr	r2, [r3, #24]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2101      	movs	r1, #1
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	619a      	str	r2, [r3, #24]
  }
}
 8001d0c:	46c0      	nop			; (mov r8, r8)
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b002      	add	sp, #8
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	1dfb      	adds	r3, r7, #7
 8001d22:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d24:	e021      	b.n	8001d6a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	d01e      	beq.n	8001d6a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d2c:	f7ff fb44 	bl	80013b8 <HAL_GetTick>
 8001d30:	0002      	movs	r2, r0
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d302      	bcc.n	8001d42 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d113      	bne.n	8001d6a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d46:	2220      	movs	r2, #32
 8001d48:	431a      	orrs	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2241      	movs	r2, #65	; 0x41
 8001d52:	2120      	movs	r1, #32
 8001d54:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	2242      	movs	r2, #66	; 0x42
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2240      	movs	r2, #64	; 0x40
 8001d62:	2100      	movs	r1, #0
 8001d64:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00f      	b.n	8001d8a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	68ba      	ldr	r2, [r7, #8]
 8001d72:	4013      	ands	r3, r2
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	425a      	negs	r2, r3
 8001d7a:	4153      	adcs	r3, r2
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	001a      	movs	r2, r3
 8001d80:	1dfb      	adds	r3, r7, #7
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d0ce      	beq.n	8001d26 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	b004      	add	sp, #16
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d9e:	e02b      	b.n	8001df8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	68b9      	ldr	r1, [r7, #8]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	0018      	movs	r0, r3
 8001da8:	f000 f86e 	bl	8001e88 <I2C_IsAcknowledgeFailed>
 8001dac:	1e03      	subs	r3, r0, #0
 8001dae:	d001      	beq.n	8001db4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e029      	b.n	8001e08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	3301      	adds	r3, #1
 8001db8:	d01e      	beq.n	8001df8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dba:	f7ff fafd 	bl	80013b8 <HAL_GetTick>
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	68ba      	ldr	r2, [r7, #8]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d302      	bcc.n	8001dd0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d113      	bne.n	8001df8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2241      	movs	r2, #65	; 0x41
 8001de0:	2120      	movs	r1, #32
 8001de2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2242      	movs	r2, #66	; 0x42
 8001de8:	2100      	movs	r1, #0
 8001dea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2240      	movs	r2, #64	; 0x40
 8001df0:	2100      	movs	r1, #0
 8001df2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e007      	b.n	8001e08 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	4013      	ands	r3, r2
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d1cc      	bne.n	8001da0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	0018      	movs	r0, r3
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b004      	add	sp, #16
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	60f8      	str	r0, [r7, #12]
 8001e18:	60b9      	str	r1, [r7, #8]
 8001e1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e1c:	e028      	b.n	8001e70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	0018      	movs	r0, r3
 8001e26:	f000 f82f 	bl	8001e88 <I2C_IsAcknowledgeFailed>
 8001e2a:	1e03      	subs	r3, r0, #0
 8001e2c:	d001      	beq.n	8001e32 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e026      	b.n	8001e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e32:	f7ff fac1 	bl	80013b8 <HAL_GetTick>
 8001e36:	0002      	movs	r2, r0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d302      	bcc.n	8001e48 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d113      	bne.n	8001e70 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2241      	movs	r2, #65	; 0x41
 8001e58:	2120      	movs	r1, #32
 8001e5a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2242      	movs	r2, #66	; 0x42
 8001e60:	2100      	movs	r1, #0
 8001e62:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2240      	movs	r2, #64	; 0x40
 8001e68:	2100      	movs	r1, #0
 8001e6a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e007      	b.n	8001e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	2220      	movs	r2, #32
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b20      	cmp	r3, #32
 8001e7c:	d1cf      	bne.n	8001e1e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	0018      	movs	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b004      	add	sp, #16
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	2210      	movs	r2, #16
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b10      	cmp	r3, #16
 8001ea0:	d164      	bne.n	8001f6c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	685a      	ldr	r2, [r3, #4]
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	049b      	lsls	r3, r3, #18
 8001eac:	401a      	ands	r2, r3
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	049b      	lsls	r3, r3, #18
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d02b      	beq.n	8001f0e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2180      	movs	r1, #128	; 0x80
 8001ec2:	01c9      	lsls	r1, r1, #7
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ec8:	e021      	b.n	8001f0e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	d01e      	beq.n	8001f0e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ed0:	f7ff fa72 	bl	80013b8 <HAL_GetTick>
 8001ed4:	0002      	movs	r2, r0
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d302      	bcc.n	8001ee6 <I2C_IsAcknowledgeFailed+0x5e>
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d113      	bne.n	8001f0e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eea:	2220      	movs	r2, #32
 8001eec:	431a      	orrs	r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2241      	movs	r2, #65	; 0x41
 8001ef6:	2120      	movs	r1, #32
 8001ef8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2242      	movs	r2, #66	; 0x42
 8001efe:	2100      	movs	r1, #0
 8001f00:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2240      	movs	r2, #64	; 0x40
 8001f06:	2100      	movs	r1, #0
 8001f08:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e02f      	b.n	8001f6e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	2220      	movs	r2, #32
 8001f16:	4013      	ands	r3, r2
 8001f18:	2b20      	cmp	r3, #32
 8001f1a:	d1d6      	bne.n	8001eca <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2210      	movs	r2, #16
 8001f22:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2220      	movs	r2, #32
 8001f2a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	0018      	movs	r0, r3
 8001f30:	f7ff fece 	bl	8001cd0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	490e      	ldr	r1, [pc, #56]	; (8001f78 <I2C_IsAcknowledgeFailed+0xf0>)
 8001f40:	400a      	ands	r2, r1
 8001f42:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f48:	2204      	movs	r2, #4
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2241      	movs	r2, #65	; 0x41
 8001f54:	2120      	movs	r1, #32
 8001f56:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2242      	movs	r2, #66	; 0x42
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2240      	movs	r2, #64	; 0x40
 8001f64:	2100      	movs	r1, #0
 8001f66:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	0018      	movs	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	b004      	add	sp, #16
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	46c0      	nop			; (mov r8, r8)
 8001f78:	fe00e800 	.word	0xfe00e800

08001f7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	0008      	movs	r0, r1
 8001f86:	0011      	movs	r1, r2
 8001f88:	607b      	str	r3, [r7, #4]
 8001f8a:	240a      	movs	r4, #10
 8001f8c:	193b      	adds	r3, r7, r4
 8001f8e:	1c02      	adds	r2, r0, #0
 8001f90:	801a      	strh	r2, [r3, #0]
 8001f92:	2009      	movs	r0, #9
 8001f94:	183b      	adds	r3, r7, r0
 8001f96:	1c0a      	adds	r2, r1, #0
 8001f98:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	6a3a      	ldr	r2, [r7, #32]
 8001fa2:	0d51      	lsrs	r1, r2, #21
 8001fa4:	2280      	movs	r2, #128	; 0x80
 8001fa6:	00d2      	lsls	r2, r2, #3
 8001fa8:	400a      	ands	r2, r1
 8001faa:	490e      	ldr	r1, [pc, #56]	; (8001fe4 <I2C_TransferConfig+0x68>)
 8001fac:	430a      	orrs	r2, r1
 8001fae:	43d2      	mvns	r2, r2
 8001fb0:	401a      	ands	r2, r3
 8001fb2:	0011      	movs	r1, r2
 8001fb4:	193b      	adds	r3, r7, r4
 8001fb6:	881b      	ldrh	r3, [r3, #0]
 8001fb8:	059b      	lsls	r3, r3, #22
 8001fba:	0d9a      	lsrs	r2, r3, #22
 8001fbc:	183b      	adds	r3, r7, r0
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	0418      	lsls	r0, r3, #16
 8001fc2:	23ff      	movs	r3, #255	; 0xff
 8001fc4:	041b      	lsls	r3, r3, #16
 8001fc6:	4003      	ands	r3, r0
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	431a      	orrs	r2, r3
 8001fce:	6a3b      	ldr	r3, [r7, #32]
 8001fd0:	431a      	orrs	r2, r3
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	b005      	add	sp, #20
 8001fe0:	bd90      	pop	{r4, r7, pc}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	03ff63ff 	.word	0x03ff63ff

08001fe8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2241      	movs	r2, #65	; 0x41
 8001ff6:	5c9b      	ldrb	r3, [r3, r2]
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	d138      	bne.n	8002070 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2240      	movs	r2, #64	; 0x40
 8002002:	5c9b      	ldrb	r3, [r3, r2]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002008:	2302      	movs	r3, #2
 800200a:	e032      	b.n	8002072 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2240      	movs	r2, #64	; 0x40
 8002010:	2101      	movs	r1, #1
 8002012:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2241      	movs	r2, #65	; 0x41
 8002018:	2124      	movs	r1, #36	; 0x24
 800201a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2101      	movs	r1, #1
 8002028:	438a      	bics	r2, r1
 800202a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4911      	ldr	r1, [pc, #68]	; (800207c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002038:	400a      	ands	r2, r1
 800203a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6819      	ldr	r1, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2101      	movs	r1, #1
 8002058:	430a      	orrs	r2, r1
 800205a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2241      	movs	r2, #65	; 0x41
 8002060:	2120      	movs	r1, #32
 8002062:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2240      	movs	r2, #64	; 0x40
 8002068:	2100      	movs	r1, #0
 800206a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	e000      	b.n	8002072 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002070:	2302      	movs	r3, #2
  }
}
 8002072:	0018      	movs	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	b002      	add	sp, #8
 8002078:	bd80      	pop	{r7, pc}
 800207a:	46c0      	nop			; (mov r8, r8)
 800207c:	ffffefff 	.word	0xffffefff

08002080 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2241      	movs	r2, #65	; 0x41
 800208e:	5c9b      	ldrb	r3, [r3, r2]
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b20      	cmp	r3, #32
 8002094:	d139      	bne.n	800210a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2240      	movs	r2, #64	; 0x40
 800209a:	5c9b      	ldrb	r3, [r3, r2]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d101      	bne.n	80020a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80020a0:	2302      	movs	r3, #2
 80020a2:	e033      	b.n	800210c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2240      	movs	r2, #64	; 0x40
 80020a8:	2101      	movs	r1, #1
 80020aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2241      	movs	r2, #65	; 0x41
 80020b0:	2124      	movs	r1, #36	; 0x24
 80020b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2101      	movs	r1, #1
 80020c0:	438a      	bics	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4a11      	ldr	r2, [pc, #68]	; (8002114 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	68fa      	ldr	r2, [r7, #12]
 80020da:	4313      	orrs	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2101      	movs	r1, #1
 80020f2:	430a      	orrs	r2, r1
 80020f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2241      	movs	r2, #65	; 0x41
 80020fa:	2120      	movs	r1, #32
 80020fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2240      	movs	r2, #64	; 0x40
 8002102:	2100      	movs	r1, #0
 8002104:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	e000      	b.n	800210c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800210a:	2302      	movs	r3, #2
  }
}
 800210c:	0018      	movs	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	b004      	add	sp, #16
 8002112:	bd80      	pop	{r7, pc}
 8002114:	fffff0ff 	.word	0xfffff0ff

08002118 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002120:	4b19      	ldr	r3, [pc, #100]	; (8002188 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a19      	ldr	r2, [pc, #100]	; (800218c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002126:	4013      	ands	r3, r2
 8002128:	0019      	movs	r1, r3
 800212a:	4b17      	ldr	r3, [pc, #92]	; (8002188 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	430a      	orrs	r2, r1
 8002130:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	429a      	cmp	r2, r3
 800213a:	d11f      	bne.n	800217c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800213c:	4b14      	ldr	r3, [pc, #80]	; (8002190 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	0013      	movs	r3, r2
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	189b      	adds	r3, r3, r2
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	4912      	ldr	r1, [pc, #72]	; (8002194 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800214a:	0018      	movs	r0, r3
 800214c:	f7fd ffdc 	bl	8000108 <__udivsi3>
 8002150:	0003      	movs	r3, r0
 8002152:	3301      	adds	r3, #1
 8002154:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002156:	e008      	b.n	800216a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	3b01      	subs	r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
 8002164:	e001      	b.n	800216a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e009      	b.n	800217e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	401a      	ands	r2, r3
 8002174:	2380      	movs	r3, #128	; 0x80
 8002176:	00db      	lsls	r3, r3, #3
 8002178:	429a      	cmp	r2, r3
 800217a:	d0ed      	beq.n	8002158 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	0018      	movs	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	b004      	add	sp, #16
 8002184:	bd80      	pop	{r7, pc}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	40007000 	.word	0x40007000
 800218c:	fffff9ff 	.word	0xfffff9ff
 8002190:	20000008 	.word	0x20000008
 8002194:	000f4240 	.word	0x000f4240

08002198 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800219c:	4b03      	ldr	r3, [pc, #12]	; (80021ac <LL_RCC_GetAPB1Prescaler+0x14>)
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	23e0      	movs	r3, #224	; 0xe0
 80021a2:	01db      	lsls	r3, r3, #7
 80021a4:	4013      	ands	r3, r2
}
 80021a6:	0018      	movs	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000

080021b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e304      	b.n	80027cc <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2201      	movs	r2, #1
 80021c8:	4013      	ands	r3, r2
 80021ca:	d100      	bne.n	80021ce <HAL_RCC_OscConfig+0x1e>
 80021cc:	e07c      	b.n	80022c8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ce:	4bc3      	ldr	r3, [pc, #780]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2238      	movs	r2, #56	; 0x38
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021d8:	4bc0      	ldr	r3, [pc, #768]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2203      	movs	r2, #3
 80021de:	4013      	ands	r3, r2
 80021e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	2b10      	cmp	r3, #16
 80021e6:	d102      	bne.n	80021ee <HAL_RCC_OscConfig+0x3e>
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d002      	beq.n	80021f4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d10b      	bne.n	800220c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f4:	4bb9      	ldr	r3, [pc, #740]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	029b      	lsls	r3, r3, #10
 80021fc:	4013      	ands	r3, r2
 80021fe:	d062      	beq.n	80022c6 <HAL_RCC_OscConfig+0x116>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d15e      	bne.n	80022c6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e2df      	b.n	80027cc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	2380      	movs	r3, #128	; 0x80
 8002212:	025b      	lsls	r3, r3, #9
 8002214:	429a      	cmp	r2, r3
 8002216:	d107      	bne.n	8002228 <HAL_RCC_OscConfig+0x78>
 8002218:	4bb0      	ldr	r3, [pc, #704]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4baf      	ldr	r3, [pc, #700]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 800221e:	2180      	movs	r1, #128	; 0x80
 8002220:	0249      	lsls	r1, r1, #9
 8002222:	430a      	orrs	r2, r1
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	e020      	b.n	800226a <HAL_RCC_OscConfig+0xba>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	23a0      	movs	r3, #160	; 0xa0
 800222e:	02db      	lsls	r3, r3, #11
 8002230:	429a      	cmp	r2, r3
 8002232:	d10e      	bne.n	8002252 <HAL_RCC_OscConfig+0xa2>
 8002234:	4ba9      	ldr	r3, [pc, #676]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4ba8      	ldr	r3, [pc, #672]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 800223a:	2180      	movs	r1, #128	; 0x80
 800223c:	02c9      	lsls	r1, r1, #11
 800223e:	430a      	orrs	r2, r1
 8002240:	601a      	str	r2, [r3, #0]
 8002242:	4ba6      	ldr	r3, [pc, #664]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	4ba5      	ldr	r3, [pc, #660]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 8002248:	2180      	movs	r1, #128	; 0x80
 800224a:	0249      	lsls	r1, r1, #9
 800224c:	430a      	orrs	r2, r1
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	e00b      	b.n	800226a <HAL_RCC_OscConfig+0xba>
 8002252:	4ba2      	ldr	r3, [pc, #648]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	4ba1      	ldr	r3, [pc, #644]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 8002258:	49a1      	ldr	r1, [pc, #644]	; (80024e0 <HAL_RCC_OscConfig+0x330>)
 800225a:	400a      	ands	r2, r1
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	4b9f      	ldr	r3, [pc, #636]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	4b9e      	ldr	r3, [pc, #632]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 8002264:	499f      	ldr	r1, [pc, #636]	; (80024e4 <HAL_RCC_OscConfig+0x334>)
 8002266:	400a      	ands	r2, r1
 8002268:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d014      	beq.n	800229c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002272:	f7ff f8a1 	bl	80013b8 <HAL_GetTick>
 8002276:	0003      	movs	r3, r0
 8002278:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800227c:	f7ff f89c 	bl	80013b8 <HAL_GetTick>
 8002280:	0002      	movs	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	; 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e29e      	b.n	80027cc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228e:	4b93      	ldr	r3, [pc, #588]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	029b      	lsls	r3, r3, #10
 8002296:	4013      	ands	r3, r2
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0xcc>
 800229a:	e015      	b.n	80022c8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7ff f88c 	bl	80013b8 <HAL_GetTick>
 80022a0:	0003      	movs	r3, r0
 80022a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a6:	f7ff f887 	bl	80013b8 <HAL_GetTick>
 80022aa:	0002      	movs	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b64      	cmp	r3, #100	; 0x64
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e289      	b.n	80027cc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022b8:	4b88      	ldr	r3, [pc, #544]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	029b      	lsls	r3, r3, #10
 80022c0:	4013      	ands	r3, r2
 80022c2:	d1f0      	bne.n	80022a6 <HAL_RCC_OscConfig+0xf6>
 80022c4:	e000      	b.n	80022c8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2202      	movs	r2, #2
 80022ce:	4013      	ands	r3, r2
 80022d0:	d100      	bne.n	80022d4 <HAL_RCC_OscConfig+0x124>
 80022d2:	e099      	b.n	8002408 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022d4:	4b81      	ldr	r3, [pc, #516]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	2238      	movs	r2, #56	; 0x38
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022de:	4b7f      	ldr	r3, [pc, #508]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2203      	movs	r2, #3
 80022e4:	4013      	ands	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	2b10      	cmp	r3, #16
 80022ec:	d102      	bne.n	80022f4 <HAL_RCC_OscConfig+0x144>
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d002      	beq.n	80022fa <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d135      	bne.n	8002366 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022fa:	4b78      	ldr	r3, [pc, #480]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	2380      	movs	r3, #128	; 0x80
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4013      	ands	r3, r2
 8002304:	d005      	beq.n	8002312 <HAL_RCC_OscConfig+0x162>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e25c      	b.n	80027cc <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002312:	4b72      	ldr	r3, [pc, #456]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4a74      	ldr	r2, [pc, #464]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 8002318:	4013      	ands	r3, r2
 800231a:	0019      	movs	r1, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	021a      	lsls	r2, r3, #8
 8002322:	4b6e      	ldr	r3, [pc, #440]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 8002324:	430a      	orrs	r2, r1
 8002326:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d112      	bne.n	8002354 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800232e:	4b6b      	ldr	r3, [pc, #428]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a6e      	ldr	r2, [pc, #440]	; (80024ec <HAL_RCC_OscConfig+0x33c>)
 8002334:	4013      	ands	r3, r2
 8002336:	0019      	movs	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	4b67      	ldr	r3, [pc, #412]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 800233e:	430a      	orrs	r2, r1
 8002340:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002342:	4b66      	ldr	r3, [pc, #408]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	0adb      	lsrs	r3, r3, #11
 8002348:	2207      	movs	r2, #7
 800234a:	4013      	ands	r3, r2
 800234c:	4a68      	ldr	r2, [pc, #416]	; (80024f0 <HAL_RCC_OscConfig+0x340>)
 800234e:	40da      	lsrs	r2, r3
 8002350:	4b68      	ldr	r3, [pc, #416]	; (80024f4 <HAL_RCC_OscConfig+0x344>)
 8002352:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002354:	4b68      	ldr	r3, [pc, #416]	; (80024f8 <HAL_RCC_OscConfig+0x348>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	0018      	movs	r0, r3
 800235a:	f7fe ffd1 	bl	8001300 <HAL_InitTick>
 800235e:	1e03      	subs	r3, r0, #0
 8002360:	d051      	beq.n	8002406 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e232      	b.n	80027cc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d030      	beq.n	80023d0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800236e:	4b5b      	ldr	r3, [pc, #364]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a5e      	ldr	r2, [pc, #376]	; (80024ec <HAL_RCC_OscConfig+0x33c>)
 8002374:	4013      	ands	r3, r2
 8002376:	0019      	movs	r1, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691a      	ldr	r2, [r3, #16]
 800237c:	4b57      	ldr	r3, [pc, #348]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 800237e:	430a      	orrs	r2, r1
 8002380:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002382:	4b56      	ldr	r3, [pc, #344]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4b55      	ldr	r3, [pc, #340]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 8002388:	2180      	movs	r1, #128	; 0x80
 800238a:	0049      	lsls	r1, r1, #1
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7ff f812 	bl	80013b8 <HAL_GetTick>
 8002394:	0003      	movs	r3, r0
 8002396:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239a:	f7ff f80d 	bl	80013b8 <HAL_GetTick>
 800239e:	0002      	movs	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e20f      	b.n	80027cc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023ac:	4b4b      	ldr	r3, [pc, #300]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4013      	ands	r3, r2
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b48      	ldr	r3, [pc, #288]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a4a      	ldr	r2, [pc, #296]	; (80024e8 <HAL_RCC_OscConfig+0x338>)
 80023be:	4013      	ands	r3, r2
 80023c0:	0019      	movs	r1, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	021a      	lsls	r2, r3, #8
 80023c8:	4b44      	ldr	r3, [pc, #272]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 80023ca:	430a      	orrs	r2, r1
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	e01b      	b.n	8002408 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80023d0:	4b42      	ldr	r3, [pc, #264]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	4b41      	ldr	r3, [pc, #260]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 80023d6:	4949      	ldr	r1, [pc, #292]	; (80024fc <HAL_RCC_OscConfig+0x34c>)
 80023d8:	400a      	ands	r2, r1
 80023da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023dc:	f7fe ffec 	bl	80013b8 <HAL_GetTick>
 80023e0:	0003      	movs	r3, r0
 80023e2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e6:	f7fe ffe7 	bl	80013b8 <HAL_GetTick>
 80023ea:	0002      	movs	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e1e9      	b.n	80027cc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023f8:	4b38      	ldr	r3, [pc, #224]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	2380      	movs	r3, #128	; 0x80
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4013      	ands	r3, r2
 8002402:	d1f0      	bne.n	80023e6 <HAL_RCC_OscConfig+0x236>
 8002404:	e000      	b.n	8002408 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002406:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2208      	movs	r2, #8
 800240e:	4013      	ands	r3, r2
 8002410:	d047      	beq.n	80024a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002412:	4b32      	ldr	r3, [pc, #200]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2238      	movs	r2, #56	; 0x38
 8002418:	4013      	ands	r3, r2
 800241a:	2b18      	cmp	r3, #24
 800241c:	d10a      	bne.n	8002434 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800241e:	4b2f      	ldr	r3, [pc, #188]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 8002420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002422:	2202      	movs	r2, #2
 8002424:	4013      	ands	r3, r2
 8002426:	d03c      	beq.n	80024a2 <HAL_RCC_OscConfig+0x2f2>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d138      	bne.n	80024a2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e1cb      	b.n	80027cc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d019      	beq.n	8002470 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800243c:	4b27      	ldr	r3, [pc, #156]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 800243e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002440:	4b26      	ldr	r3, [pc, #152]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 8002442:	2101      	movs	r1, #1
 8002444:	430a      	orrs	r2, r1
 8002446:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7fe ffb6 	bl	80013b8 <HAL_GetTick>
 800244c:	0003      	movs	r3, r0
 800244e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002452:	f7fe ffb1 	bl	80013b8 <HAL_GetTick>
 8002456:	0002      	movs	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e1b3      	b.n	80027cc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002464:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 8002466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002468:	2202      	movs	r2, #2
 800246a:	4013      	ands	r3, r2
 800246c:	d0f1      	beq.n	8002452 <HAL_RCC_OscConfig+0x2a2>
 800246e:	e018      	b.n	80024a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002470:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 8002472:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002474:	4b19      	ldr	r3, [pc, #100]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 8002476:	2101      	movs	r1, #1
 8002478:	438a      	bics	r2, r1
 800247a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247c:	f7fe ff9c 	bl	80013b8 <HAL_GetTick>
 8002480:	0003      	movs	r3, r0
 8002482:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002486:	f7fe ff97 	bl	80013b8 <HAL_GetTick>
 800248a:	0002      	movs	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e199      	b.n	80027cc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002498:	4b10      	ldr	r3, [pc, #64]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 800249a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800249c:	2202      	movs	r2, #2
 800249e:	4013      	ands	r3, r2
 80024a0:	d1f1      	bne.n	8002486 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2204      	movs	r2, #4
 80024a8:	4013      	ands	r3, r2
 80024aa:	d100      	bne.n	80024ae <HAL_RCC_OscConfig+0x2fe>
 80024ac:	e0c6      	b.n	800263c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ae:	231f      	movs	r3, #31
 80024b0:	18fb      	adds	r3, r7, r3
 80024b2:	2200      	movs	r2, #0
 80024b4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80024b6:	4b09      	ldr	r3, [pc, #36]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2238      	movs	r2, #56	; 0x38
 80024bc:	4013      	ands	r3, r2
 80024be:	2b20      	cmp	r3, #32
 80024c0:	d11e      	bne.n	8002500 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_RCC_OscConfig+0x32c>)
 80024c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c6:	2202      	movs	r2, #2
 80024c8:	4013      	ands	r3, r2
 80024ca:	d100      	bne.n	80024ce <HAL_RCC_OscConfig+0x31e>
 80024cc:	e0b6      	b.n	800263c <HAL_RCC_OscConfig+0x48c>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d000      	beq.n	80024d8 <HAL_RCC_OscConfig+0x328>
 80024d6:	e0b1      	b.n	800263c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e177      	b.n	80027cc <HAL_RCC_OscConfig+0x61c>
 80024dc:	40021000 	.word	0x40021000
 80024e0:	fffeffff 	.word	0xfffeffff
 80024e4:	fffbffff 	.word	0xfffbffff
 80024e8:	ffff80ff 	.word	0xffff80ff
 80024ec:	ffffc7ff 	.word	0xffffc7ff
 80024f0:	00f42400 	.word	0x00f42400
 80024f4:	20000008 	.word	0x20000008
 80024f8:	2000000c 	.word	0x2000000c
 80024fc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002500:	4bb4      	ldr	r3, [pc, #720]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 8002502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	055b      	lsls	r3, r3, #21
 8002508:	4013      	ands	r3, r2
 800250a:	d101      	bne.n	8002510 <HAL_RCC_OscConfig+0x360>
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <HAL_RCC_OscConfig+0x362>
 8002510:	2300      	movs	r3, #0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d011      	beq.n	800253a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	4baf      	ldr	r3, [pc, #700]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 8002518:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800251a:	4bae      	ldr	r3, [pc, #696]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 800251c:	2180      	movs	r1, #128	; 0x80
 800251e:	0549      	lsls	r1, r1, #21
 8002520:	430a      	orrs	r2, r1
 8002522:	63da      	str	r2, [r3, #60]	; 0x3c
 8002524:	4bab      	ldr	r3, [pc, #684]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 8002526:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002528:	2380      	movs	r3, #128	; 0x80
 800252a:	055b      	lsls	r3, r3, #21
 800252c:	4013      	ands	r3, r2
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002532:	231f      	movs	r3, #31
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800253a:	4ba7      	ldr	r3, [pc, #668]	; (80027d8 <HAL_RCC_OscConfig+0x628>)
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	2380      	movs	r3, #128	; 0x80
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4013      	ands	r3, r2
 8002544:	d11a      	bne.n	800257c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002546:	4ba4      	ldr	r3, [pc, #656]	; (80027d8 <HAL_RCC_OscConfig+0x628>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	4ba3      	ldr	r3, [pc, #652]	; (80027d8 <HAL_RCC_OscConfig+0x628>)
 800254c:	2180      	movs	r1, #128	; 0x80
 800254e:	0049      	lsls	r1, r1, #1
 8002550:	430a      	orrs	r2, r1
 8002552:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002554:	f7fe ff30 	bl	80013b8 <HAL_GetTick>
 8002558:	0003      	movs	r3, r0
 800255a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800255c:	e008      	b.n	8002570 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255e:	f7fe ff2b 	bl	80013b8 <HAL_GetTick>
 8002562:	0002      	movs	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d901      	bls.n	8002570 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e12d      	b.n	80027cc <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002570:	4b99      	ldr	r3, [pc, #612]	; (80027d8 <HAL_RCC_OscConfig+0x628>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	2380      	movs	r3, #128	; 0x80
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4013      	ands	r3, r2
 800257a:	d0f0      	beq.n	800255e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d106      	bne.n	8002592 <HAL_RCC_OscConfig+0x3e2>
 8002584:	4b93      	ldr	r3, [pc, #588]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 8002586:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002588:	4b92      	ldr	r3, [pc, #584]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 800258a:	2101      	movs	r1, #1
 800258c:	430a      	orrs	r2, r1
 800258e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002590:	e01c      	b.n	80025cc <HAL_RCC_OscConfig+0x41c>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	2b05      	cmp	r3, #5
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x404>
 800259a:	4b8e      	ldr	r3, [pc, #568]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 800259c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800259e:	4b8d      	ldr	r3, [pc, #564]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 80025a0:	2104      	movs	r1, #4
 80025a2:	430a      	orrs	r2, r1
 80025a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80025a6:	4b8b      	ldr	r3, [pc, #556]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 80025a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025aa:	4b8a      	ldr	r3, [pc, #552]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 80025ac:	2101      	movs	r1, #1
 80025ae:	430a      	orrs	r2, r1
 80025b0:	65da      	str	r2, [r3, #92]	; 0x5c
 80025b2:	e00b      	b.n	80025cc <HAL_RCC_OscConfig+0x41c>
 80025b4:	4b87      	ldr	r3, [pc, #540]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 80025b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025b8:	4b86      	ldr	r3, [pc, #536]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 80025ba:	2101      	movs	r1, #1
 80025bc:	438a      	bics	r2, r1
 80025be:	65da      	str	r2, [r3, #92]	; 0x5c
 80025c0:	4b84      	ldr	r3, [pc, #528]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 80025c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025c4:	4b83      	ldr	r3, [pc, #524]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 80025c6:	2104      	movs	r1, #4
 80025c8:	438a      	bics	r2, r1
 80025ca:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d014      	beq.n	80025fe <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d4:	f7fe fef0 	bl	80013b8 <HAL_GetTick>
 80025d8:	0003      	movs	r3, r0
 80025da:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025dc:	e009      	b.n	80025f2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025de:	f7fe feeb 	bl	80013b8 <HAL_GetTick>
 80025e2:	0002      	movs	r2, r0
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	4a7c      	ldr	r2, [pc, #496]	; (80027dc <HAL_RCC_OscConfig+0x62c>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e0ec      	b.n	80027cc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f2:	4b78      	ldr	r3, [pc, #480]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 80025f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f6:	2202      	movs	r2, #2
 80025f8:	4013      	ands	r3, r2
 80025fa:	d0f0      	beq.n	80025de <HAL_RCC_OscConfig+0x42e>
 80025fc:	e013      	b.n	8002626 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fe:	f7fe fedb 	bl	80013b8 <HAL_GetTick>
 8002602:	0003      	movs	r3, r0
 8002604:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002606:	e009      	b.n	800261c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002608:	f7fe fed6 	bl	80013b8 <HAL_GetTick>
 800260c:	0002      	movs	r2, r0
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	4a72      	ldr	r2, [pc, #456]	; (80027dc <HAL_RCC_OscConfig+0x62c>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e0d7      	b.n	80027cc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800261c:	4b6d      	ldr	r3, [pc, #436]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 800261e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002620:	2202      	movs	r2, #2
 8002622:	4013      	ands	r3, r2
 8002624:	d1f0      	bne.n	8002608 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002626:	231f      	movs	r3, #31
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d105      	bne.n	800263c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002630:	4b68      	ldr	r3, [pc, #416]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 8002632:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002634:	4b67      	ldr	r3, [pc, #412]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 8002636:	496a      	ldr	r1, [pc, #424]	; (80027e0 <HAL_RCC_OscConfig+0x630>)
 8002638:	400a      	ands	r2, r1
 800263a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d100      	bne.n	8002646 <HAL_RCC_OscConfig+0x496>
 8002644:	e0c1      	b.n	80027ca <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002646:	4b63      	ldr	r3, [pc, #396]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2238      	movs	r2, #56	; 0x38
 800264c:	4013      	ands	r3, r2
 800264e:	2b10      	cmp	r3, #16
 8002650:	d100      	bne.n	8002654 <HAL_RCC_OscConfig+0x4a4>
 8002652:	e081      	b.n	8002758 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	2b02      	cmp	r3, #2
 800265a:	d156      	bne.n	800270a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265c:	4b5d      	ldr	r3, [pc, #372]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b5c      	ldr	r3, [pc, #368]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 8002662:	4960      	ldr	r1, [pc, #384]	; (80027e4 <HAL_RCC_OscConfig+0x634>)
 8002664:	400a      	ands	r2, r1
 8002666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe fea6 	bl	80013b8 <HAL_GetTick>
 800266c:	0003      	movs	r3, r0
 800266e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002672:	f7fe fea1 	bl	80013b8 <HAL_GetTick>
 8002676:	0002      	movs	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b02      	cmp	r3, #2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e0a3      	b.n	80027cc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002684:	4b53      	ldr	r3, [pc, #332]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	2380      	movs	r3, #128	; 0x80
 800268a:	049b      	lsls	r3, r3, #18
 800268c:	4013      	ands	r3, r2
 800268e:	d1f0      	bne.n	8002672 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002690:	4b50      	ldr	r3, [pc, #320]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	4a54      	ldr	r2, [pc, #336]	; (80027e8 <HAL_RCC_OscConfig+0x638>)
 8002696:	4013      	ands	r3, r2
 8002698:	0019      	movs	r1, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1a      	ldr	r2, [r3, #32]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	431a      	orrs	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	431a      	orrs	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026bc:	431a      	orrs	r2, r3
 80026be:	4b45      	ldr	r3, [pc, #276]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 80026c0:	430a      	orrs	r2, r1
 80026c2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c4:	4b43      	ldr	r3, [pc, #268]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b42      	ldr	r3, [pc, #264]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 80026ca:	2180      	movs	r1, #128	; 0x80
 80026cc:	0449      	lsls	r1, r1, #17
 80026ce:	430a      	orrs	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80026d2:	4b40      	ldr	r3, [pc, #256]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 80026d4:	68da      	ldr	r2, [r3, #12]
 80026d6:	4b3f      	ldr	r3, [pc, #252]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 80026d8:	2180      	movs	r1, #128	; 0x80
 80026da:	0549      	lsls	r1, r1, #21
 80026dc:	430a      	orrs	r2, r1
 80026de:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fe fe6a 	bl	80013b8 <HAL_GetTick>
 80026e4:	0003      	movs	r3, r0
 80026e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ea:	f7fe fe65 	bl	80013b8 <HAL_GetTick>
 80026ee:	0002      	movs	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e067      	b.n	80027cc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026fc:	4b35      	ldr	r3, [pc, #212]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	2380      	movs	r3, #128	; 0x80
 8002702:	049b      	lsls	r3, r3, #18
 8002704:	4013      	ands	r3, r2
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x53a>
 8002708:	e05f      	b.n	80027ca <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270a:	4b32      	ldr	r3, [pc, #200]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	4b31      	ldr	r3, [pc, #196]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 8002710:	4934      	ldr	r1, [pc, #208]	; (80027e4 <HAL_RCC_OscConfig+0x634>)
 8002712:	400a      	ands	r2, r1
 8002714:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8002716:	4b2f      	ldr	r3, [pc, #188]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	4b2e      	ldr	r3, [pc, #184]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 800271c:	2103      	movs	r1, #3
 800271e:	438a      	bics	r2, r1
 8002720:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002722:	4b2c      	ldr	r3, [pc, #176]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 8002724:	68da      	ldr	r2, [r3, #12]
 8002726:	4b2b      	ldr	r3, [pc, #172]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 8002728:	4930      	ldr	r1, [pc, #192]	; (80027ec <HAL_RCC_OscConfig+0x63c>)
 800272a:	400a      	ands	r2, r1
 800272c:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272e:	f7fe fe43 	bl	80013b8 <HAL_GetTick>
 8002732:	0003      	movs	r3, r0
 8002734:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002738:	f7fe fe3e 	bl	80013b8 <HAL_GetTick>
 800273c:	0002      	movs	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e040      	b.n	80027cc <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800274a:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	049b      	lsls	r3, r3, #18
 8002752:	4013      	ands	r3, r2
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x588>
 8002756:	e038      	b.n	80027ca <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e033      	b.n	80027cc <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002764:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_RCC_OscConfig+0x624>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2203      	movs	r2, #3
 800276e:	401a      	ands	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1b      	ldr	r3, [r3, #32]
 8002774:	429a      	cmp	r2, r3
 8002776:	d126      	bne.n	80027c6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	2270      	movs	r2, #112	; 0x70
 800277c:	401a      	ands	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d11f      	bne.n	80027c6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	23fe      	movs	r3, #254	; 0xfe
 800278a:	01db      	lsls	r3, r3, #7
 800278c:	401a      	ands	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002792:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d116      	bne.n	80027c6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	23f8      	movs	r3, #248	; 0xf8
 800279c:	039b      	lsls	r3, r3, #14
 800279e:	401a      	ands	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d10e      	bne.n	80027c6 <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	23e0      	movs	r3, #224	; 0xe0
 80027ac:	051b      	lsls	r3, r3, #20
 80027ae:	401a      	ands	r2, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d106      	bne.n	80027c6 <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	0f5b      	lsrs	r3, r3, #29
 80027bc:	075a      	lsls	r2, r3, #29
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80027c2:	429a      	cmp	r2, r3
 80027c4:	d001      	beq.n	80027ca <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e000      	b.n	80027cc <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	0018      	movs	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	b008      	add	sp, #32
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40021000 	.word	0x40021000
 80027d8:	40007000 	.word	0x40007000
 80027dc:	00001388 	.word	0x00001388
 80027e0:	efffffff 	.word	0xefffffff
 80027e4:	feffffff 	.word	0xfeffffff
 80027e8:	11c1808c 	.word	0x11c1808c
 80027ec:	eefeffff 	.word	0xeefeffff

080027f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0e9      	b.n	80029d8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002804:	4b76      	ldr	r3, [pc, #472]	; (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2207      	movs	r2, #7
 800280a:	4013      	ands	r3, r2
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d91e      	bls.n	8002850 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002812:	4b73      	ldr	r3, [pc, #460]	; (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2207      	movs	r2, #7
 8002818:	4393      	bics	r3, r2
 800281a:	0019      	movs	r1, r3
 800281c:	4b70      	ldr	r3, [pc, #448]	; (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002824:	f7fe fdc8 	bl	80013b8 <HAL_GetTick>
 8002828:	0003      	movs	r3, r0
 800282a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800282c:	e009      	b.n	8002842 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800282e:	f7fe fdc3 	bl	80013b8 <HAL_GetTick>
 8002832:	0002      	movs	r2, r0
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	4a6a      	ldr	r2, [pc, #424]	; (80029e4 <HAL_RCC_ClockConfig+0x1f4>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e0ca      	b.n	80029d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002842:	4b67      	ldr	r3, [pc, #412]	; (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2207      	movs	r2, #7
 8002848:	4013      	ands	r3, r2
 800284a:	683a      	ldr	r2, [r7, #0]
 800284c:	429a      	cmp	r2, r3
 800284e:	d1ee      	bne.n	800282e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2202      	movs	r2, #2
 8002856:	4013      	ands	r3, r2
 8002858:	d015      	beq.n	8002886 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2204      	movs	r2, #4
 8002860:	4013      	ands	r3, r2
 8002862:	d006      	beq.n	8002872 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002864:	4b60      	ldr	r3, [pc, #384]	; (80029e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	4b5f      	ldr	r3, [pc, #380]	; (80029e8 <HAL_RCC_ClockConfig+0x1f8>)
 800286a:	21e0      	movs	r1, #224	; 0xe0
 800286c:	01c9      	lsls	r1, r1, #7
 800286e:	430a      	orrs	r2, r1
 8002870:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002872:	4b5d      	ldr	r3, [pc, #372]	; (80029e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	4a5d      	ldr	r2, [pc, #372]	; (80029ec <HAL_RCC_ClockConfig+0x1fc>)
 8002878:	4013      	ands	r3, r2
 800287a:	0019      	movs	r1, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	4b59      	ldr	r3, [pc, #356]	; (80029e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002882:	430a      	orrs	r2, r1
 8002884:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2201      	movs	r2, #1
 800288c:	4013      	ands	r3, r2
 800288e:	d057      	beq.n	8002940 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d107      	bne.n	80028a8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002898:	4b53      	ldr	r3, [pc, #332]	; (80029e8 <HAL_RCC_ClockConfig+0x1f8>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	029b      	lsls	r3, r3, #10
 80028a0:	4013      	ands	r3, r2
 80028a2:	d12b      	bne.n	80028fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e097      	b.n	80029d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d107      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b0:	4b4d      	ldr	r3, [pc, #308]	; (80029e8 <HAL_RCC_ClockConfig+0x1f8>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	049b      	lsls	r3, r3, #18
 80028b8:	4013      	ands	r3, r2
 80028ba:	d11f      	bne.n	80028fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e08b      	b.n	80029d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d107      	bne.n	80028d8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028c8:	4b47      	ldr	r3, [pc, #284]	; (80029e8 <HAL_RCC_ClockConfig+0x1f8>)
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4013      	ands	r3, r2
 80028d2:	d113      	bne.n	80028fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e07f      	b.n	80029d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d106      	bne.n	80028ee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028e0:	4b41      	ldr	r3, [pc, #260]	; (80029e8 <HAL_RCC_ClockConfig+0x1f8>)
 80028e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e4:	2202      	movs	r2, #2
 80028e6:	4013      	ands	r3, r2
 80028e8:	d108      	bne.n	80028fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e074      	b.n	80029d8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ee:	4b3e      	ldr	r3, [pc, #248]	; (80029e8 <HAL_RCC_ClockConfig+0x1f8>)
 80028f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f2:	2202      	movs	r2, #2
 80028f4:	4013      	ands	r3, r2
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e06d      	b.n	80029d8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028fc:	4b3a      	ldr	r3, [pc, #232]	; (80029e8 <HAL_RCC_ClockConfig+0x1f8>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	2207      	movs	r2, #7
 8002902:	4393      	bics	r3, r2
 8002904:	0019      	movs	r1, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	4b37      	ldr	r3, [pc, #220]	; (80029e8 <HAL_RCC_ClockConfig+0x1f8>)
 800290c:	430a      	orrs	r2, r1
 800290e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002910:	f7fe fd52 	bl	80013b8 <HAL_GetTick>
 8002914:	0003      	movs	r3, r0
 8002916:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002918:	e009      	b.n	800292e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800291a:	f7fe fd4d 	bl	80013b8 <HAL_GetTick>
 800291e:	0002      	movs	r2, r0
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	4a2f      	ldr	r2, [pc, #188]	; (80029e4 <HAL_RCC_ClockConfig+0x1f4>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d901      	bls.n	800292e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e054      	b.n	80029d8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292e:	4b2e      	ldr	r3, [pc, #184]	; (80029e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2238      	movs	r2, #56	; 0x38
 8002934:	401a      	ands	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	429a      	cmp	r2, r3
 800293e:	d1ec      	bne.n	800291a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002940:	4b27      	ldr	r3, [pc, #156]	; (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2207      	movs	r2, #7
 8002946:	4013      	ands	r3, r2
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	429a      	cmp	r2, r3
 800294c:	d21e      	bcs.n	800298c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294e:	4b24      	ldr	r3, [pc, #144]	; (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2207      	movs	r2, #7
 8002954:	4393      	bics	r3, r2
 8002956:	0019      	movs	r1, r3
 8002958:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	430a      	orrs	r2, r1
 800295e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002960:	f7fe fd2a 	bl	80013b8 <HAL_GetTick>
 8002964:	0003      	movs	r3, r0
 8002966:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002968:	e009      	b.n	800297e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800296a:	f7fe fd25 	bl	80013b8 <HAL_GetTick>
 800296e:	0002      	movs	r2, r0
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	4a1b      	ldr	r2, [pc, #108]	; (80029e4 <HAL_RCC_ClockConfig+0x1f4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e02c      	b.n	80029d8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800297e:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2207      	movs	r2, #7
 8002984:	4013      	ands	r3, r2
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d1ee      	bne.n	800296a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2204      	movs	r2, #4
 8002992:	4013      	ands	r3, r2
 8002994:	d009      	beq.n	80029aa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002996:	4b14      	ldr	r3, [pc, #80]	; (80029e8 <HAL_RCC_ClockConfig+0x1f8>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	4a15      	ldr	r2, [pc, #84]	; (80029f0 <HAL_RCC_ClockConfig+0x200>)
 800299c:	4013      	ands	r3, r2
 800299e:	0019      	movs	r1, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <HAL_RCC_ClockConfig+0x1f8>)
 80029a6:	430a      	orrs	r2, r1
 80029a8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80029aa:	f000 f829 	bl	8002a00 <HAL_RCC_GetSysClockFreq>
 80029ae:	0001      	movs	r1, r0
 80029b0:	4b0d      	ldr	r3, [pc, #52]	; (80029e8 <HAL_RCC_ClockConfig+0x1f8>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	0a1b      	lsrs	r3, r3, #8
 80029b6:	220f      	movs	r2, #15
 80029b8:	401a      	ands	r2, r3
 80029ba:	4b0e      	ldr	r3, [pc, #56]	; (80029f4 <HAL_RCC_ClockConfig+0x204>)
 80029bc:	0092      	lsls	r2, r2, #2
 80029be:	58d3      	ldr	r3, [r2, r3]
 80029c0:	221f      	movs	r2, #31
 80029c2:	4013      	ands	r3, r2
 80029c4:	000a      	movs	r2, r1
 80029c6:	40da      	lsrs	r2, r3
 80029c8:	4b0b      	ldr	r3, [pc, #44]	; (80029f8 <HAL_RCC_ClockConfig+0x208>)
 80029ca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80029cc:	4b0b      	ldr	r3, [pc, #44]	; (80029fc <HAL_RCC_ClockConfig+0x20c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7fe fc95 	bl	8001300 <HAL_InitTick>
 80029d6:	0003      	movs	r3, r0
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	b004      	add	sp, #16
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40022000 	.word	0x40022000
 80029e4:	00001388 	.word	0x00001388
 80029e8:	40021000 	.word	0x40021000
 80029ec:	fffff0ff 	.word	0xfffff0ff
 80029f0:	ffff8fff 	.word	0xffff8fff
 80029f4:	0800480c 	.word	0x0800480c
 80029f8:	20000008 	.word	0x20000008
 80029fc:	2000000c 	.word	0x2000000c

08002a00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b086      	sub	sp, #24
 8002a04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a06:	4b3c      	ldr	r3, [pc, #240]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	2238      	movs	r2, #56	; 0x38
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	d10f      	bne.n	8002a30 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002a10:	4b39      	ldr	r3, [pc, #228]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	0adb      	lsrs	r3, r3, #11
 8002a16:	2207      	movs	r2, #7
 8002a18:	4013      	ands	r3, r2
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	409a      	lsls	r2, r3
 8002a1e:	0013      	movs	r3, r2
 8002a20:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002a22:	6839      	ldr	r1, [r7, #0]
 8002a24:	4835      	ldr	r0, [pc, #212]	; (8002afc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a26:	f7fd fb6f 	bl	8000108 <__udivsi3>
 8002a2a:	0003      	movs	r3, r0
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	e05d      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a30:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2238      	movs	r2, #56	; 0x38
 8002a36:	4013      	ands	r3, r2
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	d102      	bne.n	8002a42 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a3c:	4b30      	ldr	r3, [pc, #192]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	e054      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a42:	4b2d      	ldr	r3, [pc, #180]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	2238      	movs	r2, #56	; 0x38
 8002a48:	4013      	ands	r3, r2
 8002a4a:	2b10      	cmp	r3, #16
 8002a4c:	d138      	bne.n	8002ac0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002a4e:	4b2a      	ldr	r3, [pc, #168]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2203      	movs	r2, #3
 8002a54:	4013      	ands	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a58:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	091b      	lsrs	r3, r3, #4
 8002a5e:	2207      	movs	r2, #7
 8002a60:	4013      	ands	r3, r2
 8002a62:	3301      	adds	r3, #1
 8002a64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d10d      	bne.n	8002a88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a6c:	68b9      	ldr	r1, [r7, #8]
 8002a6e:	4824      	ldr	r0, [pc, #144]	; (8002b00 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a70:	f7fd fb4a 	bl	8000108 <__udivsi3>
 8002a74:	0003      	movs	r3, r0
 8002a76:	0019      	movs	r1, r3
 8002a78:	4b1f      	ldr	r3, [pc, #124]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	227f      	movs	r2, #127	; 0x7f
 8002a80:	4013      	ands	r3, r2
 8002a82:	434b      	muls	r3, r1
 8002a84:	617b      	str	r3, [r7, #20]
        break;
 8002a86:	e00d      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	481c      	ldr	r0, [pc, #112]	; (8002afc <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a8c:	f7fd fb3c 	bl	8000108 <__udivsi3>
 8002a90:	0003      	movs	r3, r0
 8002a92:	0019      	movs	r1, r3
 8002a94:	4b18      	ldr	r3, [pc, #96]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	0a1b      	lsrs	r3, r3, #8
 8002a9a:	227f      	movs	r2, #127	; 0x7f
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	434b      	muls	r3, r1
 8002aa0:	617b      	str	r3, [r7, #20]
        break;
 8002aa2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002aa4:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	0f5b      	lsrs	r3, r3, #29
 8002aaa:	2207      	movs	r2, #7
 8002aac:	4013      	ands	r3, r2
 8002aae:	3301      	adds	r3, #1
 8002ab0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	6978      	ldr	r0, [r7, #20]
 8002ab6:	f7fd fb27 	bl	8000108 <__udivsi3>
 8002aba:	0003      	movs	r3, r0
 8002abc:	613b      	str	r3, [r7, #16]
 8002abe:	e015      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002ac0:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	2238      	movs	r2, #56	; 0x38
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2b20      	cmp	r3, #32
 8002aca:	d103      	bne.n	8002ad4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	e00b      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002ad4:	4b08      	ldr	r3, [pc, #32]	; (8002af8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2238      	movs	r2, #56	; 0x38
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b18      	cmp	r3, #24
 8002ade:	d103      	bne.n	8002ae8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002ae0:	23fa      	movs	r3, #250	; 0xfa
 8002ae2:	01db      	lsls	r3, r3, #7
 8002ae4:	613b      	str	r3, [r7, #16]
 8002ae6:	e001      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002aec:	693b      	ldr	r3, [r7, #16]
}
 8002aee:	0018      	movs	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b006      	add	sp, #24
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	40021000 	.word	0x40021000
 8002afc:	00f42400 	.word	0x00f42400
 8002b00:	007a1200 	.word	0x007a1200

08002b04 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b08:	4b02      	ldr	r3, [pc, #8]	; (8002b14 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
}
 8002b0c:	0018      	movs	r0, r3
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	46c0      	nop			; (mov r8, r8)
 8002b14:	20000008 	.word	0x20000008

08002b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b18:	b5b0      	push	{r4, r5, r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002b1c:	f7ff fff2 	bl	8002b04 <HAL_RCC_GetHCLKFreq>
 8002b20:	0004      	movs	r4, r0
 8002b22:	f7ff fb39 	bl	8002198 <LL_RCC_GetAPB1Prescaler>
 8002b26:	0003      	movs	r3, r0
 8002b28:	0b1a      	lsrs	r2, r3, #12
 8002b2a:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b2c:	0092      	lsls	r2, r2, #2
 8002b2e:	58d3      	ldr	r3, [r2, r3]
 8002b30:	221f      	movs	r2, #31
 8002b32:	4013      	ands	r3, r2
 8002b34:	40dc      	lsrs	r4, r3
 8002b36:	0023      	movs	r3, r4
}
 8002b38:	0018      	movs	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	0800484c 	.word	0x0800484c

08002b44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002b4c:	2313      	movs	r3, #19
 8002b4e:	18fb      	adds	r3, r7, r3
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b54:	2312      	movs	r3, #18
 8002b56:	18fb      	adds	r3, r7, r3
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	2380      	movs	r3, #128	; 0x80
 8002b62:	029b      	lsls	r3, r3, #10
 8002b64:	4013      	ands	r3, r2
 8002b66:	d100      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002b68:	e0a3      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b6a:	2011      	movs	r0, #17
 8002b6c:	183b      	adds	r3, r7, r0
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b72:	4bc2      	ldr	r3, [pc, #776]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	055b      	lsls	r3, r3, #21
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d110      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b7e:	4bbf      	ldr	r3, [pc, #764]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b82:	4bbe      	ldr	r3, [pc, #760]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b84:	2180      	movs	r1, #128	; 0x80
 8002b86:	0549      	lsls	r1, r1, #21
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002b8c:	4bbb      	ldr	r3, [pc, #748]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	055b      	lsls	r3, r3, #21
 8002b94:	4013      	ands	r3, r2
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b9a:	183b      	adds	r3, r7, r0
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ba0:	4bb7      	ldr	r3, [pc, #732]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4bb6      	ldr	r3, [pc, #728]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ba6:	2180      	movs	r1, #128	; 0x80
 8002ba8:	0049      	lsls	r1, r1, #1
 8002baa:	430a      	orrs	r2, r1
 8002bac:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002bae:	f7fe fc03 	bl	80013b8 <HAL_GetTick>
 8002bb2:	0003      	movs	r3, r0
 8002bb4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bb6:	e00b      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bb8:	f7fe fbfe 	bl	80013b8 <HAL_GetTick>
 8002bbc:	0002      	movs	r2, r0
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d904      	bls.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002bc6:	2313      	movs	r3, #19
 8002bc8:	18fb      	adds	r3, r7, r3
 8002bca:	2203      	movs	r2, #3
 8002bcc:	701a      	strb	r2, [r3, #0]
        break;
 8002bce:	e005      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bd0:	4bab      	ldr	r3, [pc, #684]	; (8002e80 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d0ed      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002bdc:	2313      	movs	r3, #19
 8002bde:	18fb      	adds	r3, r7, r3
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d154      	bne.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002be6:	4ba5      	ldr	r3, [pc, #660]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002be8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002bea:	23c0      	movs	r3, #192	; 0xc0
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4013      	ands	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d019      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d014      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c02:	4b9e      	ldr	r3, [pc, #632]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c06:	4a9f      	ldr	r2, [pc, #636]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c0c:	4b9b      	ldr	r3, [pc, #620]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c10:	4b9a      	ldr	r3, [pc, #616]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c12:	2180      	movs	r1, #128	; 0x80
 8002c14:	0249      	lsls	r1, r1, #9
 8002c16:	430a      	orrs	r2, r1
 8002c18:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c1a:	4b98      	ldr	r3, [pc, #608]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002c1e:	4b97      	ldr	r3, [pc, #604]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c20:	4999      	ldr	r1, [pc, #612]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002c22:	400a      	ands	r2, r1
 8002c24:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c26:	4b95      	ldr	r3, [pc, #596]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	4013      	ands	r3, r2
 8002c32:	d016      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7fe fbc0 	bl	80013b8 <HAL_GetTick>
 8002c38:	0003      	movs	r3, r0
 8002c3a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c3c:	e00c      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3e:	f7fe fbbb 	bl	80013b8 <HAL_GetTick>
 8002c42:	0002      	movs	r2, r0
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	4a90      	ldr	r2, [pc, #576]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d904      	bls.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002c4e:	2313      	movs	r3, #19
 8002c50:	18fb      	adds	r3, r7, r3
 8002c52:	2203      	movs	r2, #3
 8002c54:	701a      	strb	r2, [r3, #0]
            break;
 8002c56:	e004      	b.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c58:	4b88      	ldr	r3, [pc, #544]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d0ed      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002c62:	2313      	movs	r3, #19
 8002c64:	18fb      	adds	r3, r7, r3
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10a      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c6c:	4b83      	ldr	r3, [pc, #524]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c70:	4a84      	ldr	r2, [pc, #528]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002c72:	4013      	ands	r3, r2
 8002c74:	0019      	movs	r1, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7a:	4b80      	ldr	r3, [pc, #512]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c80:	e00c      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c82:	2312      	movs	r3, #18
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	2213      	movs	r2, #19
 8002c88:	18ba      	adds	r2, r7, r2
 8002c8a:	7812      	ldrb	r2, [r2, #0]
 8002c8c:	701a      	strb	r2, [r3, #0]
 8002c8e:	e005      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c90:	2312      	movs	r3, #18
 8002c92:	18fb      	adds	r3, r7, r3
 8002c94:	2213      	movs	r2, #19
 8002c96:	18ba      	adds	r2, r7, r2
 8002c98:	7812      	ldrb	r2, [r2, #0]
 8002c9a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c9c:	2311      	movs	r3, #17
 8002c9e:	18fb      	adds	r3, r7, r3
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d105      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca6:	4b75      	ldr	r3, [pc, #468]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ca8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002caa:	4b74      	ldr	r3, [pc, #464]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cac:	4978      	ldr	r1, [pc, #480]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002cae:	400a      	ands	r2, r1
 8002cb0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	4013      	ands	r3, r2
 8002cba:	d009      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002cbc:	4b6f      	ldr	r3, [pc, #444]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	4393      	bics	r3, r2
 8002cc4:	0019      	movs	r1, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	4b6c      	ldr	r3, [pc, #432]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	2210      	movs	r2, #16
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d009      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cda:	4b68      	ldr	r3, [pc, #416]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cde:	4a6d      	ldr	r2, [pc, #436]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	4b64      	ldr	r3, [pc, #400]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cea:	430a      	orrs	r2, r1
 8002cec:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	2380      	movs	r3, #128	; 0x80
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	d009      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cfa:	4b60      	ldr	r3, [pc, #384]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfe:	4a66      	ldr	r2, [pc, #408]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002d00:	4013      	ands	r3, r2
 8002d02:	0019      	movs	r1, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695a      	ldr	r2, [r3, #20]
 8002d08:	4b5c      	ldr	r3, [pc, #368]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	2380      	movs	r3, #128	; 0x80
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4013      	ands	r3, r2
 8002d18:	d009      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d1a:	4b58      	ldr	r3, [pc, #352]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d1e:	4a5f      	ldr	r2, [pc, #380]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	0019      	movs	r1, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699a      	ldr	r2, [r3, #24]
 8002d28:	4b54      	ldr	r3, [pc, #336]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2220      	movs	r2, #32
 8002d34:	4013      	ands	r3, r2
 8002d36:	d009      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d38:	4b50      	ldr	r3, [pc, #320]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3c:	4a58      	ldr	r2, [pc, #352]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	0019      	movs	r1, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	4b4d      	ldr	r3, [pc, #308]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* (RCC_CCIPR_I2C2SEL */

#if defined(RNG)
  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	02db      	lsls	r3, r3, #11
 8002d54:	4013      	ands	r3, r2
 8002d56:	d016      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d58:	4b48      	ldr	r3, [pc, #288]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d5c:	4a51      	ldr	r2, [pc, #324]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	0019      	movs	r1, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	69da      	ldr	r2, [r3, #28]
 8002d66:	4b45      	ldr	r3, [pc, #276]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69da      	ldr	r2, [r3, #28]
 8002d70:	23c0      	movs	r3, #192	; 0xc0
 8002d72:	051b      	lsls	r3, r3, #20
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d106      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x242>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002d78:	4b40      	ldr	r3, [pc, #256]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	4b3f      	ldr	r3, [pc, #252]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d7e:	2180      	movs	r1, #128	; 0x80
 8002d80:	0449      	lsls	r1, r1, #17
 8002d82:	430a      	orrs	r2, r1
 8002d84:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	2380      	movs	r3, #128	; 0x80
 8002d8c:	01db      	lsls	r3, r3, #7
 8002d8e:	4013      	ands	r3, r2
 8002d90:	d015      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d92:	4b3a      	ldr	r3, [pc, #232]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	0899      	lsrs	r1, r3, #2
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1a      	ldr	r2, [r3, #32]
 8002d9e:	4b37      	ldr	r3, [pc, #220]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002da0:	430a      	orrs	r2, r1
 8002da2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1a      	ldr	r2, [r3, #32]
 8002da8:	2380      	movs	r3, #128	; 0x80
 8002daa:	05db      	lsls	r3, r3, #23
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d106      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002db0:	4b32      	ldr	r3, [pc, #200]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002db2:	68da      	ldr	r2, [r3, #12]
 8002db4:	4b31      	ldr	r3, [pc, #196]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002db6:	2180      	movs	r1, #128	; 0x80
 8002db8:	0249      	lsls	r1, r1, #9
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	2380      	movs	r3, #128	; 0x80
 8002dc4:	039b      	lsls	r3, r3, #14
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d016      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002dca:	4b2c      	ldr	r3, [pc, #176]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dce:	4a36      	ldr	r2, [pc, #216]	; (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	0019      	movs	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dd8:	4b28      	ldr	r3, [pc, #160]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	03db      	lsls	r3, r3, #15
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d106      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002dea:	4b24      	ldr	r3, [pc, #144]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	4b23      	ldr	r3, [pc, #140]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002df0:	2180      	movs	r1, #128	; 0x80
 8002df2:	0449      	lsls	r1, r1, #17
 8002df4:	430a      	orrs	r2, r1
 8002df6:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	03db      	lsls	r3, r3, #15
 8002e00:	4013      	ands	r3, r2
 8002e02:	d016      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002e04:	4b1d      	ldr	r3, [pc, #116]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e08:	4a28      	ldr	r2, [pc, #160]	; (8002eac <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	0019      	movs	r1, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e12:	4b1a      	ldr	r3, [pc, #104]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e14:	430a      	orrs	r2, r1
 8002e16:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e1c:	2380      	movs	r3, #128	; 0x80
 8002e1e:	045b      	lsls	r3, r3, #17
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d106      	bne.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002e24:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	4b14      	ldr	r3, [pc, #80]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e2a:	2180      	movs	r1, #128	; 0x80
 8002e2c:	0449      	lsls	r1, r1, #17
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	2380      	movs	r3, #128	; 0x80
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	d016      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e42:	4a1b      	ldr	r2, [pc, #108]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	0019      	movs	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e4e:	430a      	orrs	r2, r1
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691a      	ldr	r2, [r3, #16]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	01db      	lsls	r3, r3, #7
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d106      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e64:	2180      	movs	r1, #128	; 0x80
 8002e66:	0249      	lsls	r1, r1, #9
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002e6c:	2312      	movs	r3, #18
 8002e6e:	18fb      	adds	r3, r7, r3
 8002e70:	781b      	ldrb	r3, [r3, #0]
}
 8002e72:	0018      	movs	r0, r3
 8002e74:	46bd      	mov	sp, r7
 8002e76:	b006      	add	sp, #24
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	46c0      	nop			; (mov r8, r8)
 8002e7c:	40021000 	.word	0x40021000
 8002e80:	40007000 	.word	0x40007000
 8002e84:	fffffcff 	.word	0xfffffcff
 8002e88:	fffeffff 	.word	0xfffeffff
 8002e8c:	00001388 	.word	0x00001388
 8002e90:	efffffff 	.word	0xefffffff
 8002e94:	fffff3ff 	.word	0xfffff3ff
 8002e98:	fff3ffff 	.word	0xfff3ffff
 8002e9c:	ffcfffff 	.word	0xffcfffff
 8002ea0:	ffffcfff 	.word	0xffffcfff
 8002ea4:	f3ffffff 	.word	0xf3ffffff
 8002ea8:	ffbfffff 	.word	0xffbfffff
 8002eac:	feffffff 	.word	0xfeffffff
 8002eb0:	ffff3fff 	.word	0xffff3fff

08002eb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e046      	b.n	8002f54 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2284      	movs	r2, #132	; 0x84
 8002eca:	589b      	ldr	r3, [r3, r2]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d107      	bne.n	8002ee0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2280      	movs	r2, #128	; 0x80
 8002ed4:	2100      	movs	r1, #0
 8002ed6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	0018      	movs	r0, r3
 8002edc:	f7fe f948 	bl	8001170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2284      	movs	r2, #132	; 0x84
 8002ee4:	2124      	movs	r1, #36	; 0x24
 8002ee6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	438a      	bics	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	0018      	movs	r0, r3
 8002efc:	f000 f830 	bl	8002f60 <UART_SetConfig>
 8002f00:	0003      	movs	r3, r0
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e024      	b.n	8002f54 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d003      	beq.n	8002f1a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	0018      	movs	r0, r3
 8002f16:	f000 fab3 	bl	8003480 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	490d      	ldr	r1, [pc, #52]	; (8002f5c <HAL_UART_Init+0xa8>)
 8002f26:	400a      	ands	r2, r1
 8002f28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	212a      	movs	r1, #42	; 0x2a
 8002f36:	438a      	bics	r2, r1
 8002f38:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2101      	movs	r1, #1
 8002f46:	430a      	orrs	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f000 fb4b 	bl	80035e8 <UART_CheckIdleState>
 8002f52:	0003      	movs	r3, r0
}
 8002f54:	0018      	movs	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b002      	add	sp, #8
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	ffffb7ff 	.word	0xffffb7ff

08002f60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f60:	b5b0      	push	{r4, r5, r7, lr}
 8002f62:	b090      	sub	sp, #64	; 0x40
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f68:	231a      	movs	r3, #26
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	4694      	mov	ip, r2
 8002f6e:	44bc      	add	ip, r7
 8002f70:	4463      	add	r3, ip
 8002f72:	2200      	movs	r2, #0
 8002f74:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	431a      	orrs	r2, r3
 8002f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4ac7      	ldr	r2, [pc, #796]	; (80032b4 <UART_SetConfig+0x354>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	0019      	movs	r1, r3
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4ac3      	ldr	r2, [pc, #780]	; (80032b8 <UART_SetConfig+0x358>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	0018      	movs	r0, r3
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	68d9      	ldr	r1, [r3, #12]
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	0003      	movs	r3, r0
 8002fba:	430b      	orrs	r3, r1
 8002fbc:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4abc      	ldr	r2, [pc, #752]	; (80032bc <UART_SetConfig+0x35c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d004      	beq.n	8002fd8 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	4ab8      	ldr	r2, [pc, #736]	; (80032c0 <UART_SetConfig+0x360>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	0019      	movs	r1, r3
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fea:	430b      	orrs	r3, r1
 8002fec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	220f      	movs	r2, #15
 8002ff6:	4393      	bics	r3, r2
 8002ff8:	0018      	movs	r0, r3
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	0003      	movs	r3, r0
 8003004:	430b      	orrs	r3, r1
 8003006:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4aad      	ldr	r2, [pc, #692]	; (80032c4 <UART_SetConfig+0x364>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d136      	bne.n	8003080 <UART_SetConfig+0x120>
 8003012:	4bad      	ldr	r3, [pc, #692]	; (80032c8 <UART_SetConfig+0x368>)
 8003014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003016:	2203      	movs	r2, #3
 8003018:	4013      	ands	r3, r2
 800301a:	2b03      	cmp	r3, #3
 800301c:	d020      	beq.n	8003060 <UART_SetConfig+0x100>
 800301e:	d827      	bhi.n	8003070 <UART_SetConfig+0x110>
 8003020:	2b02      	cmp	r3, #2
 8003022:	d00d      	beq.n	8003040 <UART_SetConfig+0xe0>
 8003024:	d824      	bhi.n	8003070 <UART_SetConfig+0x110>
 8003026:	2b00      	cmp	r3, #0
 8003028:	d002      	beq.n	8003030 <UART_SetConfig+0xd0>
 800302a:	2b01      	cmp	r3, #1
 800302c:	d010      	beq.n	8003050 <UART_SetConfig+0xf0>
 800302e:	e01f      	b.n	8003070 <UART_SetConfig+0x110>
 8003030:	231b      	movs	r3, #27
 8003032:	2220      	movs	r2, #32
 8003034:	4694      	mov	ip, r2
 8003036:	44bc      	add	ip, r7
 8003038:	4463      	add	r3, ip
 800303a:	2200      	movs	r2, #0
 800303c:	701a      	strb	r2, [r3, #0]
 800303e:	e07c      	b.n	800313a <UART_SetConfig+0x1da>
 8003040:	231b      	movs	r3, #27
 8003042:	2220      	movs	r2, #32
 8003044:	4694      	mov	ip, r2
 8003046:	44bc      	add	ip, r7
 8003048:	4463      	add	r3, ip
 800304a:	2202      	movs	r2, #2
 800304c:	701a      	strb	r2, [r3, #0]
 800304e:	e074      	b.n	800313a <UART_SetConfig+0x1da>
 8003050:	231b      	movs	r3, #27
 8003052:	2220      	movs	r2, #32
 8003054:	4694      	mov	ip, r2
 8003056:	44bc      	add	ip, r7
 8003058:	4463      	add	r3, ip
 800305a:	2204      	movs	r2, #4
 800305c:	701a      	strb	r2, [r3, #0]
 800305e:	e06c      	b.n	800313a <UART_SetConfig+0x1da>
 8003060:	231b      	movs	r3, #27
 8003062:	2220      	movs	r2, #32
 8003064:	4694      	mov	ip, r2
 8003066:	44bc      	add	ip, r7
 8003068:	4463      	add	r3, ip
 800306a:	2208      	movs	r2, #8
 800306c:	701a      	strb	r2, [r3, #0]
 800306e:	e064      	b.n	800313a <UART_SetConfig+0x1da>
 8003070:	231b      	movs	r3, #27
 8003072:	2220      	movs	r2, #32
 8003074:	4694      	mov	ip, r2
 8003076:	44bc      	add	ip, r7
 8003078:	4463      	add	r3, ip
 800307a:	2210      	movs	r2, #16
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	e05c      	b.n	800313a <UART_SetConfig+0x1da>
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a91      	ldr	r2, [pc, #580]	; (80032cc <UART_SetConfig+0x36c>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d107      	bne.n	800309a <UART_SetConfig+0x13a>
 800308a:	231b      	movs	r3, #27
 800308c:	2220      	movs	r2, #32
 800308e:	4694      	mov	ip, r2
 8003090:	44bc      	add	ip, r7
 8003092:	4463      	add	r3, ip
 8003094:	2200      	movs	r2, #0
 8003096:	701a      	strb	r2, [r3, #0]
 8003098:	e04f      	b.n	800313a <UART_SetConfig+0x1da>
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a87      	ldr	r2, [pc, #540]	; (80032bc <UART_SetConfig+0x35c>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d143      	bne.n	800312c <UART_SetConfig+0x1cc>
 80030a4:	4b88      	ldr	r3, [pc, #544]	; (80032c8 <UART_SetConfig+0x368>)
 80030a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030a8:	23c0      	movs	r3, #192	; 0xc0
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	4013      	ands	r3, r2
 80030ae:	22c0      	movs	r2, #192	; 0xc0
 80030b0:	0112      	lsls	r2, r2, #4
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d02a      	beq.n	800310c <UART_SetConfig+0x1ac>
 80030b6:	22c0      	movs	r2, #192	; 0xc0
 80030b8:	0112      	lsls	r2, r2, #4
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d82e      	bhi.n	800311c <UART_SetConfig+0x1bc>
 80030be:	2280      	movs	r2, #128	; 0x80
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d012      	beq.n	80030ec <UART_SetConfig+0x18c>
 80030c6:	2280      	movs	r2, #128	; 0x80
 80030c8:	0112      	lsls	r2, r2, #4
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d826      	bhi.n	800311c <UART_SetConfig+0x1bc>
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d004      	beq.n	80030dc <UART_SetConfig+0x17c>
 80030d2:	2280      	movs	r2, #128	; 0x80
 80030d4:	00d2      	lsls	r2, r2, #3
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d010      	beq.n	80030fc <UART_SetConfig+0x19c>
 80030da:	e01f      	b.n	800311c <UART_SetConfig+0x1bc>
 80030dc:	231b      	movs	r3, #27
 80030de:	2220      	movs	r2, #32
 80030e0:	4694      	mov	ip, r2
 80030e2:	44bc      	add	ip, r7
 80030e4:	4463      	add	r3, ip
 80030e6:	2200      	movs	r2, #0
 80030e8:	701a      	strb	r2, [r3, #0]
 80030ea:	e026      	b.n	800313a <UART_SetConfig+0x1da>
 80030ec:	231b      	movs	r3, #27
 80030ee:	2220      	movs	r2, #32
 80030f0:	4694      	mov	ip, r2
 80030f2:	44bc      	add	ip, r7
 80030f4:	4463      	add	r3, ip
 80030f6:	2202      	movs	r2, #2
 80030f8:	701a      	strb	r2, [r3, #0]
 80030fa:	e01e      	b.n	800313a <UART_SetConfig+0x1da>
 80030fc:	231b      	movs	r3, #27
 80030fe:	2220      	movs	r2, #32
 8003100:	4694      	mov	ip, r2
 8003102:	44bc      	add	ip, r7
 8003104:	4463      	add	r3, ip
 8003106:	2204      	movs	r2, #4
 8003108:	701a      	strb	r2, [r3, #0]
 800310a:	e016      	b.n	800313a <UART_SetConfig+0x1da>
 800310c:	231b      	movs	r3, #27
 800310e:	2220      	movs	r2, #32
 8003110:	4694      	mov	ip, r2
 8003112:	44bc      	add	ip, r7
 8003114:	4463      	add	r3, ip
 8003116:	2208      	movs	r2, #8
 8003118:	701a      	strb	r2, [r3, #0]
 800311a:	e00e      	b.n	800313a <UART_SetConfig+0x1da>
 800311c:	231b      	movs	r3, #27
 800311e:	2220      	movs	r2, #32
 8003120:	4694      	mov	ip, r2
 8003122:	44bc      	add	ip, r7
 8003124:	4463      	add	r3, ip
 8003126:	2210      	movs	r2, #16
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	e006      	b.n	800313a <UART_SetConfig+0x1da>
 800312c:	231b      	movs	r3, #27
 800312e:	2220      	movs	r2, #32
 8003130:	4694      	mov	ip, r2
 8003132:	44bc      	add	ip, r7
 8003134:	4463      	add	r3, ip
 8003136:	2210      	movs	r2, #16
 8003138:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a5f      	ldr	r2, [pc, #380]	; (80032bc <UART_SetConfig+0x35c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d000      	beq.n	8003146 <UART_SetConfig+0x1e6>
 8003144:	e096      	b.n	8003274 <UART_SetConfig+0x314>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003146:	231b      	movs	r3, #27
 8003148:	2220      	movs	r2, #32
 800314a:	4694      	mov	ip, r2
 800314c:	44bc      	add	ip, r7
 800314e:	4463      	add	r3, ip
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b08      	cmp	r3, #8
 8003154:	d015      	beq.n	8003182 <UART_SetConfig+0x222>
 8003156:	dc18      	bgt.n	800318a <UART_SetConfig+0x22a>
 8003158:	2b04      	cmp	r3, #4
 800315a:	d00d      	beq.n	8003178 <UART_SetConfig+0x218>
 800315c:	dc15      	bgt.n	800318a <UART_SetConfig+0x22a>
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <UART_SetConfig+0x208>
 8003162:	2b02      	cmp	r3, #2
 8003164:	d005      	beq.n	8003172 <UART_SetConfig+0x212>
 8003166:	e010      	b.n	800318a <UART_SetConfig+0x22a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003168:	f7ff fcd6 	bl	8002b18 <HAL_RCC_GetPCLK1Freq>
 800316c:	0003      	movs	r3, r0
 800316e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003170:	e015      	b.n	800319e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003172:	4b57      	ldr	r3, [pc, #348]	; (80032d0 <UART_SetConfig+0x370>)
 8003174:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003176:	e012      	b.n	800319e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003178:	f7ff fc42 	bl	8002a00 <HAL_RCC_GetSysClockFreq>
 800317c:	0003      	movs	r3, r0
 800317e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003180:	e00d      	b.n	800319e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	021b      	lsls	r3, r3, #8
 8003186:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003188:	e009      	b.n	800319e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800318a:	2300      	movs	r3, #0
 800318c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800318e:	231a      	movs	r3, #26
 8003190:	2220      	movs	r2, #32
 8003192:	4694      	mov	ip, r2
 8003194:	44bc      	add	ip, r7
 8003196:	4463      	add	r3, ip
 8003198:	2201      	movs	r2, #1
 800319a:	701a      	strb	r2, [r3, #0]
        break;
 800319c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800319e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d100      	bne.n	80031a6 <UART_SetConfig+0x246>
 80031a4:	e14f      	b.n	8003446 <UART_SetConfig+0x4e6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031aa:	4b4a      	ldr	r3, [pc, #296]	; (80032d4 <UART_SetConfig+0x374>)
 80031ac:	0052      	lsls	r2, r2, #1
 80031ae:	5ad3      	ldrh	r3, [r2, r3]
 80031b0:	0019      	movs	r1, r3
 80031b2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031b4:	f7fc ffa8 	bl	8000108 <__udivsi3>
 80031b8:	0003      	movs	r3, r0
 80031ba:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	0013      	movs	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	189b      	adds	r3, r3, r2
 80031c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d305      	bcc.n	80031d8 <UART_SetConfig+0x278>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80031d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d907      	bls.n	80031e8 <UART_SetConfig+0x288>
      {
        ret = HAL_ERROR;
 80031d8:	231a      	movs	r3, #26
 80031da:	2220      	movs	r2, #32
 80031dc:	4694      	mov	ip, r2
 80031de:	44bc      	add	ip, r7
 80031e0:	4463      	add	r3, ip
 80031e2:	2201      	movs	r2, #1
 80031e4:	701a      	strb	r2, [r3, #0]
 80031e6:	e12e      	b.n	8003446 <UART_SetConfig+0x4e6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031ea:	61bb      	str	r3, [r7, #24]
 80031ec:	2300      	movs	r3, #0
 80031ee:	61fb      	str	r3, [r7, #28]
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031f4:	4b37      	ldr	r3, [pc, #220]	; (80032d4 <UART_SetConfig+0x374>)
 80031f6:	0052      	lsls	r2, r2, #1
 80031f8:	5ad3      	ldrh	r3, [r2, r3]
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	69b8      	ldr	r0, [r7, #24]
 8003206:	69f9      	ldr	r1, [r7, #28]
 8003208:	f7fd f8f4 	bl	80003f4 <__aeabi_uldivmod>
 800320c:	0002      	movs	r2, r0
 800320e:	000b      	movs	r3, r1
 8003210:	0e11      	lsrs	r1, r2, #24
 8003212:	021d      	lsls	r5, r3, #8
 8003214:	430d      	orrs	r5, r1
 8003216:	0214      	lsls	r4, r2, #8
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	085b      	lsrs	r3, r3, #1
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	68b8      	ldr	r0, [r7, #8]
 8003226:	68f9      	ldr	r1, [r7, #12]
 8003228:	1900      	adds	r0, r0, r4
 800322a:	4169      	adcs	r1, r5
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	603b      	str	r3, [r7, #0]
 8003232:	2300      	movs	r3, #0
 8003234:	607b      	str	r3, [r7, #4]
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f7fd f8db 	bl	80003f4 <__aeabi_uldivmod>
 800323e:	0002      	movs	r2, r0
 8003240:	000b      	movs	r3, r1
 8003242:	0013      	movs	r3, r2
 8003244:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003246:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003248:	23c0      	movs	r3, #192	; 0xc0
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	429a      	cmp	r2, r3
 800324e:	d309      	bcc.n	8003264 <UART_SetConfig+0x304>
 8003250:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003252:	2380      	movs	r3, #128	; 0x80
 8003254:	035b      	lsls	r3, r3, #13
 8003256:	429a      	cmp	r2, r3
 8003258:	d204      	bcs.n	8003264 <UART_SetConfig+0x304>
        {
          huart->Instance->BRR = usartdiv;
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003260:	60da      	str	r2, [r3, #12]
 8003262:	e0f0      	b.n	8003446 <UART_SetConfig+0x4e6>
        }
        else
        {
          ret = HAL_ERROR;
 8003264:	231a      	movs	r3, #26
 8003266:	2220      	movs	r2, #32
 8003268:	4694      	mov	ip, r2
 800326a:	44bc      	add	ip, r7
 800326c:	4463      	add	r3, ip
 800326e:	2201      	movs	r2, #1
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	e0e8      	b.n	8003446 <UART_SetConfig+0x4e6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	69da      	ldr	r2, [r3, #28]
 8003278:	2380      	movs	r3, #128	; 0x80
 800327a:	021b      	lsls	r3, r3, #8
 800327c:	429a      	cmp	r2, r3
 800327e:	d000      	beq.n	8003282 <UART_SetConfig+0x322>
 8003280:	e086      	b.n	8003390 <UART_SetConfig+0x430>
  {
    switch (clocksource)
 8003282:	231b      	movs	r3, #27
 8003284:	2220      	movs	r2, #32
 8003286:	4694      	mov	ip, r2
 8003288:	44bc      	add	ip, r7
 800328a:	4463      	add	r3, ip
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b08      	cmp	r3, #8
 8003290:	d027      	beq.n	80032e2 <UART_SetConfig+0x382>
 8003292:	dc2a      	bgt.n	80032ea <UART_SetConfig+0x38a>
 8003294:	2b04      	cmp	r3, #4
 8003296:	d01f      	beq.n	80032d8 <UART_SetConfig+0x378>
 8003298:	dc27      	bgt.n	80032ea <UART_SetConfig+0x38a>
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <UART_SetConfig+0x344>
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d005      	beq.n	80032ae <UART_SetConfig+0x34e>
 80032a2:	e022      	b.n	80032ea <UART_SetConfig+0x38a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032a4:	f7ff fc38 	bl	8002b18 <HAL_RCC_GetPCLK1Freq>
 80032a8:	0003      	movs	r3, r0
 80032aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032ac:	e027      	b.n	80032fe <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032ae:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <UART_SetConfig+0x370>)
 80032b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032b2:	e024      	b.n	80032fe <UART_SetConfig+0x39e>
 80032b4:	cfff69f3 	.word	0xcfff69f3
 80032b8:	ffffcfff 	.word	0xffffcfff
 80032bc:	40008000 	.word	0x40008000
 80032c0:	11fff4ff 	.word	0x11fff4ff
 80032c4:	40013800 	.word	0x40013800
 80032c8:	40021000 	.word	0x40021000
 80032cc:	40004400 	.word	0x40004400
 80032d0:	00f42400 	.word	0x00f42400
 80032d4:	0800486c 	.word	0x0800486c
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032d8:	f7ff fb92 	bl	8002a00 <HAL_RCC_GetSysClockFreq>
 80032dc:	0003      	movs	r3, r0
 80032de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032e0:	e00d      	b.n	80032fe <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032e2:	2380      	movs	r3, #128	; 0x80
 80032e4:	021b      	lsls	r3, r3, #8
 80032e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032e8:	e009      	b.n	80032fe <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80032ee:	231a      	movs	r3, #26
 80032f0:	2220      	movs	r2, #32
 80032f2:	4694      	mov	ip, r2
 80032f4:	44bc      	add	ip, r7
 80032f6:	4463      	add	r3, ip
 80032f8:	2201      	movs	r2, #1
 80032fa:	701a      	strb	r2, [r3, #0]
        break;
 80032fc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003300:	2b00      	cmp	r3, #0
 8003302:	d100      	bne.n	8003306 <UART_SetConfig+0x3a6>
 8003304:	e09f      	b.n	8003446 <UART_SetConfig+0x4e6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800330a:	4b5b      	ldr	r3, [pc, #364]	; (8003478 <UART_SetConfig+0x518>)
 800330c:	0052      	lsls	r2, r2, #1
 800330e:	5ad3      	ldrh	r3, [r2, r3]
 8003310:	0019      	movs	r1, r3
 8003312:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003314:	f7fc fef8 	bl	8000108 <__udivsi3>
 8003318:	0003      	movs	r3, r0
 800331a:	005a      	lsls	r2, r3, #1
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	085b      	lsrs	r3, r3, #1
 8003322:	18d2      	adds	r2, r2, r3
 8003324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	0019      	movs	r1, r3
 800332a:	0010      	movs	r0, r2
 800332c:	f7fc feec 	bl	8000108 <__udivsi3>
 8003330:	0003      	movs	r3, r0
 8003332:	b29b      	uxth	r3, r3
 8003334:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003338:	2b0f      	cmp	r3, #15
 800333a:	d921      	bls.n	8003380 <UART_SetConfig+0x420>
 800333c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800333e:	2380      	movs	r3, #128	; 0x80
 8003340:	025b      	lsls	r3, r3, #9
 8003342:	429a      	cmp	r2, r3
 8003344:	d21c      	bcs.n	8003380 <UART_SetConfig+0x420>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003348:	b29a      	uxth	r2, r3
 800334a:	200e      	movs	r0, #14
 800334c:	2420      	movs	r4, #32
 800334e:	193b      	adds	r3, r7, r4
 8003350:	181b      	adds	r3, r3, r0
 8003352:	210f      	movs	r1, #15
 8003354:	438a      	bics	r2, r1
 8003356:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335a:	085b      	lsrs	r3, r3, #1
 800335c:	b29b      	uxth	r3, r3
 800335e:	2207      	movs	r2, #7
 8003360:	4013      	ands	r3, r2
 8003362:	b299      	uxth	r1, r3
 8003364:	193b      	adds	r3, r7, r4
 8003366:	181b      	adds	r3, r3, r0
 8003368:	193a      	adds	r2, r7, r4
 800336a:	1812      	adds	r2, r2, r0
 800336c:	8812      	ldrh	r2, [r2, #0]
 800336e:	430a      	orrs	r2, r1
 8003370:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	193a      	adds	r2, r7, r4
 8003378:	1812      	adds	r2, r2, r0
 800337a:	8812      	ldrh	r2, [r2, #0]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	e062      	b.n	8003446 <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 8003380:	231a      	movs	r3, #26
 8003382:	2220      	movs	r2, #32
 8003384:	4694      	mov	ip, r2
 8003386:	44bc      	add	ip, r7
 8003388:	4463      	add	r3, ip
 800338a:	2201      	movs	r2, #1
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	e05a      	b.n	8003446 <UART_SetConfig+0x4e6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003390:	231b      	movs	r3, #27
 8003392:	2220      	movs	r2, #32
 8003394:	4694      	mov	ip, r2
 8003396:	44bc      	add	ip, r7
 8003398:	4463      	add	r3, ip
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b08      	cmp	r3, #8
 800339e:	d015      	beq.n	80033cc <UART_SetConfig+0x46c>
 80033a0:	dc18      	bgt.n	80033d4 <UART_SetConfig+0x474>
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d00d      	beq.n	80033c2 <UART_SetConfig+0x462>
 80033a6:	dc15      	bgt.n	80033d4 <UART_SetConfig+0x474>
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <UART_SetConfig+0x452>
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d005      	beq.n	80033bc <UART_SetConfig+0x45c>
 80033b0:	e010      	b.n	80033d4 <UART_SetConfig+0x474>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b2:	f7ff fbb1 	bl	8002b18 <HAL_RCC_GetPCLK1Freq>
 80033b6:	0003      	movs	r3, r0
 80033b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033ba:	e015      	b.n	80033e8 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033bc:	4b2f      	ldr	r3, [pc, #188]	; (800347c <UART_SetConfig+0x51c>)
 80033be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033c0:	e012      	b.n	80033e8 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033c2:	f7ff fb1d 	bl	8002a00 <HAL_RCC_GetSysClockFreq>
 80033c6:	0003      	movs	r3, r0
 80033c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033ca:	e00d      	b.n	80033e8 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033cc:	2380      	movs	r3, #128	; 0x80
 80033ce:	021b      	lsls	r3, r3, #8
 80033d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80033d2:	e009      	b.n	80033e8 <UART_SetConfig+0x488>
      default:
        pclk = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80033d8:	231a      	movs	r3, #26
 80033da:	2220      	movs	r2, #32
 80033dc:	4694      	mov	ip, r2
 80033de:	44bc      	add	ip, r7
 80033e0:	4463      	add	r3, ip
 80033e2:	2201      	movs	r2, #1
 80033e4:	701a      	strb	r2, [r3, #0]
        break;
 80033e6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80033e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d02b      	beq.n	8003446 <UART_SetConfig+0x4e6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033f2:	4b21      	ldr	r3, [pc, #132]	; (8003478 <UART_SetConfig+0x518>)
 80033f4:	0052      	lsls	r2, r2, #1
 80033f6:	5ad3      	ldrh	r3, [r2, r3]
 80033f8:	0019      	movs	r1, r3
 80033fa:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80033fc:	f7fc fe84 	bl	8000108 <__udivsi3>
 8003400:	0003      	movs	r3, r0
 8003402:	001a      	movs	r2, r3
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	085b      	lsrs	r3, r3, #1
 800340a:	18d2      	adds	r2, r2, r3
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	0019      	movs	r1, r3
 8003412:	0010      	movs	r0, r2
 8003414:	f7fc fe78 	bl	8000108 <__udivsi3>
 8003418:	0003      	movs	r3, r0
 800341a:	b29b      	uxth	r3, r3
 800341c:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003420:	2b0f      	cmp	r3, #15
 8003422:	d909      	bls.n	8003438 <UART_SetConfig+0x4d8>
 8003424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003426:	2380      	movs	r3, #128	; 0x80
 8003428:	025b      	lsls	r3, r3, #9
 800342a:	429a      	cmp	r2, r3
 800342c:	d204      	bcs.n	8003438 <UART_SetConfig+0x4d8>
      {
        huart->Instance->BRR = usartdiv;
 800342e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	e006      	b.n	8003446 <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 8003438:	231a      	movs	r3, #26
 800343a:	2220      	movs	r2, #32
 800343c:	4694      	mov	ip, r2
 800343e:	44bc      	add	ip, r7
 8003440:	4463      	add	r3, ip
 8003442:	2201      	movs	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	226a      	movs	r2, #106	; 0x6a
 800344a:	2101      	movs	r1, #1
 800344c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	2268      	movs	r2, #104	; 0x68
 8003452:	2101      	movs	r1, #1
 8003454:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003458:	2200      	movs	r2, #0
 800345a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345e:	2200      	movs	r2, #0
 8003460:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003462:	231a      	movs	r3, #26
 8003464:	2220      	movs	r2, #32
 8003466:	4694      	mov	ip, r2
 8003468:	44bc      	add	ip, r7
 800346a:	4463      	add	r3, ip
 800346c:	781b      	ldrb	r3, [r3, #0]
}
 800346e:	0018      	movs	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	b010      	add	sp, #64	; 0x40
 8003474:	bdb0      	pop	{r4, r5, r7, pc}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	0800486c 	.word	0x0800486c
 800347c:	00f42400 	.word	0x00f42400

08003480 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	2201      	movs	r2, #1
 800348e:	4013      	ands	r3, r2
 8003490:	d00b      	beq.n	80034aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	4a4a      	ldr	r2, [pc, #296]	; (80035c4 <UART_AdvFeatureConfig+0x144>)
 800349a:	4013      	ands	r3, r2
 800349c:	0019      	movs	r1, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ae:	2202      	movs	r2, #2
 80034b0:	4013      	ands	r3, r2
 80034b2:	d00b      	beq.n	80034cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	4a43      	ldr	r2, [pc, #268]	; (80035c8 <UART_AdvFeatureConfig+0x148>)
 80034bc:	4013      	ands	r3, r2
 80034be:	0019      	movs	r1, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d0:	2204      	movs	r2, #4
 80034d2:	4013      	ands	r3, r2
 80034d4:	d00b      	beq.n	80034ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	4a3b      	ldr	r2, [pc, #236]	; (80035cc <UART_AdvFeatureConfig+0x14c>)
 80034de:	4013      	ands	r3, r2
 80034e0:	0019      	movs	r1, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	2208      	movs	r2, #8
 80034f4:	4013      	ands	r3, r2
 80034f6:	d00b      	beq.n	8003510 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	4a34      	ldr	r2, [pc, #208]	; (80035d0 <UART_AdvFeatureConfig+0x150>)
 8003500:	4013      	ands	r3, r2
 8003502:	0019      	movs	r1, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	430a      	orrs	r2, r1
 800350e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	2210      	movs	r2, #16
 8003516:	4013      	ands	r3, r2
 8003518:	d00b      	beq.n	8003532 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	4a2c      	ldr	r2, [pc, #176]	; (80035d4 <UART_AdvFeatureConfig+0x154>)
 8003522:	4013      	ands	r3, r2
 8003524:	0019      	movs	r1, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003536:	2220      	movs	r2, #32
 8003538:	4013      	ands	r3, r2
 800353a:	d00b      	beq.n	8003554 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	4a25      	ldr	r2, [pc, #148]	; (80035d8 <UART_AdvFeatureConfig+0x158>)
 8003544:	4013      	ands	r3, r2
 8003546:	0019      	movs	r1, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	2240      	movs	r2, #64	; 0x40
 800355a:	4013      	ands	r3, r2
 800355c:	d01d      	beq.n	800359a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	4a1d      	ldr	r2, [pc, #116]	; (80035dc <UART_AdvFeatureConfig+0x15c>)
 8003566:	4013      	ands	r3, r2
 8003568:	0019      	movs	r1, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800357a:	2380      	movs	r3, #128	; 0x80
 800357c:	035b      	lsls	r3, r3, #13
 800357e:	429a      	cmp	r2, r3
 8003580:	d10b      	bne.n	800359a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	4a15      	ldr	r2, [pc, #84]	; (80035e0 <UART_AdvFeatureConfig+0x160>)
 800358a:	4013      	ands	r3, r2
 800358c:	0019      	movs	r1, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800359e:	2280      	movs	r2, #128	; 0x80
 80035a0:	4013      	ands	r3, r2
 80035a2:	d00b      	beq.n	80035bc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	4a0e      	ldr	r2, [pc, #56]	; (80035e4 <UART_AdvFeatureConfig+0x164>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	0019      	movs	r1, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	430a      	orrs	r2, r1
 80035ba:	605a      	str	r2, [r3, #4]
  }
}
 80035bc:	46c0      	nop			; (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	b002      	add	sp, #8
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	fffdffff 	.word	0xfffdffff
 80035c8:	fffeffff 	.word	0xfffeffff
 80035cc:	fffbffff 	.word	0xfffbffff
 80035d0:	ffff7fff 	.word	0xffff7fff
 80035d4:	ffffefff 	.word	0xffffefff
 80035d8:	ffffdfff 	.word	0xffffdfff
 80035dc:	ffefffff 	.word	0xffefffff
 80035e0:	ff9fffff 	.word	0xff9fffff
 80035e4:	fff7ffff 	.word	0xfff7ffff

080035e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b086      	sub	sp, #24
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	228c      	movs	r2, #140	; 0x8c
 80035f4:	2100      	movs	r1, #0
 80035f6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035f8:	f7fd fede 	bl	80013b8 <HAL_GetTick>
 80035fc:	0003      	movs	r3, r0
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2208      	movs	r2, #8
 8003608:	4013      	ands	r3, r2
 800360a:	2b08      	cmp	r3, #8
 800360c:	d10c      	bne.n	8003628 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2280      	movs	r2, #128	; 0x80
 8003612:	0391      	lsls	r1, r2, #14
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	4a18      	ldr	r2, [pc, #96]	; (8003678 <UART_CheckIdleState+0x90>)
 8003618:	9200      	str	r2, [sp, #0]
 800361a:	2200      	movs	r2, #0
 800361c:	f000 f82e 	bl	800367c <UART_WaitOnFlagUntilTimeout>
 8003620:	1e03      	subs	r3, r0, #0
 8003622:	d001      	beq.n	8003628 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e023      	b.n	8003670 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2204      	movs	r2, #4
 8003630:	4013      	ands	r3, r2
 8003632:	2b04      	cmp	r3, #4
 8003634:	d10c      	bne.n	8003650 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2280      	movs	r2, #128	; 0x80
 800363a:	03d1      	lsls	r1, r2, #15
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	4a0e      	ldr	r2, [pc, #56]	; (8003678 <UART_CheckIdleState+0x90>)
 8003640:	9200      	str	r2, [sp, #0]
 8003642:	2200      	movs	r2, #0
 8003644:	f000 f81a 	bl	800367c <UART_WaitOnFlagUntilTimeout>
 8003648:	1e03      	subs	r3, r0, #0
 800364a:	d001      	beq.n	8003650 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e00f      	b.n	8003670 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2284      	movs	r2, #132	; 0x84
 8003654:	2120      	movs	r1, #32
 8003656:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2288      	movs	r2, #136	; 0x88
 800365c:	2120      	movs	r1, #32
 800365e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2280      	movs	r2, #128	; 0x80
 800366a:	2100      	movs	r1, #0
 800366c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	0018      	movs	r0, r3
 8003672:	46bd      	mov	sp, r7
 8003674:	b004      	add	sp, #16
 8003676:	bd80      	pop	{r7, pc}
 8003678:	01ffffff 	.word	0x01ffffff

0800367c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b094      	sub	sp, #80	; 0x50
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	1dfb      	adds	r3, r7, #7
 800368a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800368c:	e0a7      	b.n	80037de <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800368e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003690:	3301      	adds	r3, #1
 8003692:	d100      	bne.n	8003696 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003694:	e0a3      	b.n	80037de <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003696:	f7fd fe8f 	bl	80013b8 <HAL_GetTick>
 800369a:	0002      	movs	r2, r0
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d302      	bcc.n	80036ac <UART_WaitOnFlagUntilTimeout+0x30>
 80036a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d13f      	bne.n	800372c <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036ac:	f3ef 8310 	mrs	r3, PRIMASK
 80036b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80036b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80036b4:	647b      	str	r3, [r7, #68]	; 0x44
 80036b6:	2301      	movs	r3, #1
 80036b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036bc:	f383 8810 	msr	PRIMASK, r3
}
 80036c0:	46c0      	nop			; (mov r8, r8)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	494e      	ldr	r1, [pc, #312]	; (8003808 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80036ce:	400a      	ands	r2, r1
 80036d0:	601a      	str	r2, [r3, #0]
 80036d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036d4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036d8:	f383 8810 	msr	PRIMASK, r3
}
 80036dc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036de:	f3ef 8310 	mrs	r3, PRIMASK
 80036e2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80036e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e6:	643b      	str	r3, [r7, #64]	; 0x40
 80036e8:	2301      	movs	r3, #1
 80036ea:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ee:	f383 8810 	msr	PRIMASK, r3
}
 80036f2:	46c0      	nop			; (mov r8, r8)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2101      	movs	r1, #1
 8003700:	438a      	bics	r2, r1
 8003702:	609a      	str	r2, [r3, #8]
 8003704:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003706:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800370a:	f383 8810 	msr	PRIMASK, r3
}
 800370e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2284      	movs	r2, #132	; 0x84
 8003714:	2120      	movs	r1, #32
 8003716:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2288      	movs	r2, #136	; 0x88
 800371c:	2120      	movs	r1, #32
 800371e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2280      	movs	r2, #128	; 0x80
 8003724:	2100      	movs	r1, #0
 8003726:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e069      	b.n	8003800 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2204      	movs	r2, #4
 8003734:	4013      	ands	r3, r2
 8003736:	d052      	beq.n	80037de <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	69da      	ldr	r2, [r3, #28]
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	401a      	ands	r2, r3
 8003744:	2380      	movs	r3, #128	; 0x80
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	429a      	cmp	r2, r3
 800374a:	d148      	bne.n	80037de <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2280      	movs	r2, #128	; 0x80
 8003752:	0112      	lsls	r2, r2, #4
 8003754:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003756:	f3ef 8310 	mrs	r3, PRIMASK
 800375a:	613b      	str	r3, [r7, #16]
  return(result);
 800375c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800375e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003760:	2301      	movs	r3, #1
 8003762:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f383 8810 	msr	PRIMASK, r3
}
 800376a:	46c0      	nop			; (mov r8, r8)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4924      	ldr	r1, [pc, #144]	; (8003808 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003778:	400a      	ands	r2, r1
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800377e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	f383 8810 	msr	PRIMASK, r3
}
 8003786:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003788:	f3ef 8310 	mrs	r3, PRIMASK
 800378c:	61fb      	str	r3, [r7, #28]
  return(result);
 800378e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003790:	64bb      	str	r3, [r7, #72]	; 0x48
 8003792:	2301      	movs	r3, #1
 8003794:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	f383 8810 	msr	PRIMASK, r3
}
 800379c:	46c0      	nop			; (mov r8, r8)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2101      	movs	r1, #1
 80037aa:	438a      	bics	r2, r1
 80037ac:	609a      	str	r2, [r3, #8]
 80037ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b4:	f383 8810 	msr	PRIMASK, r3
}
 80037b8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2284      	movs	r2, #132	; 0x84
 80037be:	2120      	movs	r1, #32
 80037c0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2288      	movs	r2, #136	; 0x88
 80037c6:	2120      	movs	r1, #32
 80037c8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	228c      	movs	r2, #140	; 0x8c
 80037ce:	2120      	movs	r1, #32
 80037d0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2280      	movs	r2, #128	; 0x80
 80037d6:	2100      	movs	r1, #0
 80037d8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e010      	b.n	8003800 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69db      	ldr	r3, [r3, #28]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	4013      	ands	r3, r2
 80037e8:	68ba      	ldr	r2, [r7, #8]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	425a      	negs	r2, r3
 80037ee:	4153      	adcs	r3, r2
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	001a      	movs	r2, r3
 80037f4:	1dfb      	adds	r3, r7, #7
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d100      	bne.n	80037fe <UART_WaitOnFlagUntilTimeout+0x182>
 80037fc:	e747      	b.n	800368e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	0018      	movs	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	b014      	add	sp, #80	; 0x50
 8003806:	bd80      	pop	{r7, pc}
 8003808:	fffffe5f 	.word	0xfffffe5f

0800380c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2280      	movs	r2, #128	; 0x80
 8003818:	5c9b      	ldrb	r3, [r3, r2]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d101      	bne.n	8003822 <HAL_UARTEx_DisableFifoMode+0x16>
 800381e:	2302      	movs	r3, #2
 8003820:	e027      	b.n	8003872 <HAL_UARTEx_DisableFifoMode+0x66>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2280      	movs	r2, #128	; 0x80
 8003826:	2101      	movs	r1, #1
 8003828:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2284      	movs	r2, #132	; 0x84
 800382e:	2124      	movs	r1, #36	; 0x24
 8003830:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2101      	movs	r1, #1
 8003846:	438a      	bics	r2, r1
 8003848:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4a0b      	ldr	r2, [pc, #44]	; (800387c <HAL_UARTEx_DisableFifoMode+0x70>)
 800384e:	4013      	ands	r3, r2
 8003850:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2284      	movs	r2, #132	; 0x84
 8003864:	2120      	movs	r1, #32
 8003866:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2280      	movs	r2, #128	; 0x80
 800386c:	2100      	movs	r1, #0
 800386e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	0018      	movs	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	b004      	add	sp, #16
 8003878:	bd80      	pop	{r7, pc}
 800387a:	46c0      	nop			; (mov r8, r8)
 800387c:	dfffffff 	.word	0xdfffffff

08003880 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2280      	movs	r2, #128	; 0x80
 800388e:	5c9b      	ldrb	r3, [r3, r2]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d101      	bne.n	8003898 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003894:	2302      	movs	r3, #2
 8003896:	e02e      	b.n	80038f6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2280      	movs	r2, #128	; 0x80
 800389c:	2101      	movs	r1, #1
 800389e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2284      	movs	r2, #132	; 0x84
 80038a4:	2124      	movs	r1, #36	; 0x24
 80038a6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2101      	movs	r1, #1
 80038bc:	438a      	bics	r2, r1
 80038be:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	08d9      	lsrs	r1, r3, #3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	0018      	movs	r0, r3
 80038d8:	f000 f854 	bl	8003984 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2284      	movs	r2, #132	; 0x84
 80038e8:	2120      	movs	r1, #32
 80038ea:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2280      	movs	r2, #128	; 0x80
 80038f0:	2100      	movs	r1, #0
 80038f2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	0018      	movs	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b004      	add	sp, #16
 80038fc:	bd80      	pop	{r7, pc}
	...

08003900 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2280      	movs	r2, #128	; 0x80
 800390e:	5c9b      	ldrb	r3, [r3, r2]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003914:	2302      	movs	r3, #2
 8003916:	e02f      	b.n	8003978 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2280      	movs	r2, #128	; 0x80
 800391c:	2101      	movs	r1, #1
 800391e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2284      	movs	r2, #132	; 0x84
 8003924:	2124      	movs	r1, #36	; 0x24
 8003926:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2101      	movs	r1, #1
 800393c:	438a      	bics	r2, r1
 800393e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	4a0e      	ldr	r2, [pc, #56]	; (8003980 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003948:	4013      	ands	r3, r2
 800394a:	0019      	movs	r1, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	0018      	movs	r0, r3
 800395a:	f000 f813 	bl	8003984 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2284      	movs	r2, #132	; 0x84
 800396a:	2120      	movs	r1, #32
 800396c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2280      	movs	r2, #128	; 0x80
 8003972:	2100      	movs	r1, #0
 8003974:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	0018      	movs	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	b004      	add	sp, #16
 800397e:	bd80      	pop	{r7, pc}
 8003980:	f1ffffff 	.word	0xf1ffffff

08003984 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003990:	2b00      	cmp	r3, #0
 8003992:	d108      	bne.n	80039a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	226a      	movs	r2, #106	; 0x6a
 8003998:	2101      	movs	r1, #1
 800399a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2268      	movs	r2, #104	; 0x68
 80039a0:	2101      	movs	r1, #1
 80039a2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80039a4:	e043      	b.n	8003a2e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80039a6:	260f      	movs	r6, #15
 80039a8:	19bb      	adds	r3, r7, r6
 80039aa:	2208      	movs	r2, #8
 80039ac:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80039ae:	200e      	movs	r0, #14
 80039b0:	183b      	adds	r3, r7, r0
 80039b2:	2208      	movs	r2, #8
 80039b4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	0e5b      	lsrs	r3, r3, #25
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	240d      	movs	r4, #13
 80039c2:	193b      	adds	r3, r7, r4
 80039c4:	2107      	movs	r1, #7
 80039c6:	400a      	ands	r2, r1
 80039c8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	0f5b      	lsrs	r3, r3, #29
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	250c      	movs	r5, #12
 80039d6:	197b      	adds	r3, r7, r5
 80039d8:	2107      	movs	r1, #7
 80039da:	400a      	ands	r2, r1
 80039dc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039de:	183b      	adds	r3, r7, r0
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	197a      	adds	r2, r7, r5
 80039e4:	7812      	ldrb	r2, [r2, #0]
 80039e6:	4914      	ldr	r1, [pc, #80]	; (8003a38 <UARTEx_SetNbDataToProcess+0xb4>)
 80039e8:	5c8a      	ldrb	r2, [r1, r2]
 80039ea:	435a      	muls	r2, r3
 80039ec:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80039ee:	197b      	adds	r3, r7, r5
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	4a12      	ldr	r2, [pc, #72]	; (8003a3c <UARTEx_SetNbDataToProcess+0xb8>)
 80039f4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80039f6:	0019      	movs	r1, r3
 80039f8:	f7fc fc10 	bl	800021c <__divsi3>
 80039fc:	0003      	movs	r3, r0
 80039fe:	b299      	uxth	r1, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	226a      	movs	r2, #106	; 0x6a
 8003a04:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a06:	19bb      	adds	r3, r7, r6
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	193a      	adds	r2, r7, r4
 8003a0c:	7812      	ldrb	r2, [r2, #0]
 8003a0e:	490a      	ldr	r1, [pc, #40]	; (8003a38 <UARTEx_SetNbDataToProcess+0xb4>)
 8003a10:	5c8a      	ldrb	r2, [r1, r2]
 8003a12:	435a      	muls	r2, r3
 8003a14:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003a16:	193b      	adds	r3, r7, r4
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	4a08      	ldr	r2, [pc, #32]	; (8003a3c <UARTEx_SetNbDataToProcess+0xb8>)
 8003a1c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003a1e:	0019      	movs	r1, r3
 8003a20:	f7fc fbfc 	bl	800021c <__divsi3>
 8003a24:	0003      	movs	r3, r0
 8003a26:	b299      	uxth	r1, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2268      	movs	r2, #104	; 0x68
 8003a2c:	5299      	strh	r1, [r3, r2]
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b005      	add	sp, #20
 8003a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	08004884 	.word	0x08004884
 8003a3c:	0800488c 	.word	0x0800488c

08003a40 <__libc_init_array>:
 8003a40:	b570      	push	{r4, r5, r6, lr}
 8003a42:	2600      	movs	r6, #0
 8003a44:	4d0c      	ldr	r5, [pc, #48]	; (8003a78 <__libc_init_array+0x38>)
 8003a46:	4c0d      	ldr	r4, [pc, #52]	; (8003a7c <__libc_init_array+0x3c>)
 8003a48:	1b64      	subs	r4, r4, r5
 8003a4a:	10a4      	asrs	r4, r4, #2
 8003a4c:	42a6      	cmp	r6, r4
 8003a4e:	d109      	bne.n	8003a64 <__libc_init_array+0x24>
 8003a50:	2600      	movs	r6, #0
 8003a52:	f000 f821 	bl	8003a98 <_init>
 8003a56:	4d0a      	ldr	r5, [pc, #40]	; (8003a80 <__libc_init_array+0x40>)
 8003a58:	4c0a      	ldr	r4, [pc, #40]	; (8003a84 <__libc_init_array+0x44>)
 8003a5a:	1b64      	subs	r4, r4, r5
 8003a5c:	10a4      	asrs	r4, r4, #2
 8003a5e:	42a6      	cmp	r6, r4
 8003a60:	d105      	bne.n	8003a6e <__libc_init_array+0x2e>
 8003a62:	bd70      	pop	{r4, r5, r6, pc}
 8003a64:	00b3      	lsls	r3, r6, #2
 8003a66:	58eb      	ldr	r3, [r5, r3]
 8003a68:	4798      	blx	r3
 8003a6a:	3601      	adds	r6, #1
 8003a6c:	e7ee      	b.n	8003a4c <__libc_init_array+0xc>
 8003a6e:	00b3      	lsls	r3, r6, #2
 8003a70:	58eb      	ldr	r3, [r5, r3]
 8003a72:	4798      	blx	r3
 8003a74:	3601      	adds	r6, #1
 8003a76:	e7f2      	b.n	8003a5e <__libc_init_array+0x1e>
 8003a78:	0800489c 	.word	0x0800489c
 8003a7c:	0800489c 	.word	0x0800489c
 8003a80:	0800489c 	.word	0x0800489c
 8003a84:	080048a0 	.word	0x080048a0

08003a88 <memset>:
 8003a88:	0003      	movs	r3, r0
 8003a8a:	1882      	adds	r2, r0, r2
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d100      	bne.n	8003a92 <memset+0xa>
 8003a90:	4770      	bx	lr
 8003a92:	7019      	strb	r1, [r3, #0]
 8003a94:	3301      	adds	r3, #1
 8003a96:	e7f9      	b.n	8003a8c <memset+0x4>

08003a98 <_init>:
 8003a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a9a:	46c0      	nop			; (mov r8, r8)
 8003a9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a9e:	bc08      	pop	{r3}
 8003aa0:	469e      	mov	lr, r3
 8003aa2:	4770      	bx	lr

08003aa4 <_fini>:
 8003aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aaa:	bc08      	pop	{r3}
 8003aac:	469e      	mov	lr, r3
 8003aae:	4770      	bx	lr
